"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _helpers = require("../helpers");

const xctestCommands = {};

xctestCommands.runXCUITest = async function runXCUITest(testRunnerBundleId, appUnderTestBundleId, xctestBundleId, opts = {}) {
  const uiTestProcess = this.createSubProcess(['xctest', 'run', 'ui', xctestBundleId, appUnderTestBundleId, testRunnerBundleId, ...(opts.args || [])], {
    env: (0, _helpers.convertToIDBEnv)(opts.env)
  });
  await uiTestProcess.start(0);
  return uiTestProcess;
};

xctestCommands.installXCTestBundle = async function installXCTestBundle(xctestBundlePath) {
  const output = await this.exec(['xctest', 'install', xctestBundlePath, '--json']);

  try {
    const object = JSON.parse(output);
    return object.installedTestBundleId;
  } catch (e) {
    throw new Error(`Failed to parse '${output}' into json object`);
  }
};

xctestCommands.listXCTestBundles = async function listXCTestBundles() {
  const bundles = (0, _helpers.fixOutputToArray)((await this.exec(['xctest', 'list', '--json'])));
  return bundles.map(bundle => bundle.bundle_id);
};

var _default = xctestCommands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90b29scy94Y3Rlc3QtY29tbWFuZHMuanMiXSwibmFtZXMiOlsieGN0ZXN0Q29tbWFuZHMiLCJydW5YQ1VJVGVzdCIsInRlc3RSdW5uZXJCdW5kbGVJZCIsImFwcFVuZGVyVGVzdEJ1bmRsZUlkIiwieGN0ZXN0QnVuZGxlSWQiLCJvcHRzIiwidWlUZXN0UHJvY2VzcyIsImNyZWF0ZVN1YlByb2Nlc3MiLCJhcmdzIiwiZW52Iiwic3RhcnQiLCJpbnN0YWxsWENUZXN0QnVuZGxlIiwieGN0ZXN0QnVuZGxlUGF0aCIsIm91dHB1dCIsImV4ZWMiLCJvYmplY3QiLCJKU09OIiwicGFyc2UiLCJpbnN0YWxsZWRUZXN0QnVuZGxlSWQiLCJlIiwiRXJyb3IiLCJsaXN0WENUZXN0QnVuZGxlcyIsImJ1bmRsZXMiLCJtYXAiLCJidW5kbGUiLCJidW5kbGVfaWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUVBLE1BQU1BLGNBQWMsR0FBRyxFQUF2Qjs7QUFpQkFBLGNBQWMsQ0FBQ0MsV0FBZixHQUE2QixlQUFlQSxXQUFmLENBQTRCQyxrQkFBNUIsRUFBZ0RDLG9CQUFoRCxFQUFzRUMsY0FBdEUsRUFBc0ZDLElBQUksR0FBRyxFQUE3RixFQUFpRztBQUM1SCxRQUFNQyxhQUFhLEdBQUcsS0FBS0MsZ0JBQUwsQ0FBc0IsQ0FDMUMsUUFEMEMsRUFDaEMsS0FEZ0MsRUFFMUMsSUFGMEMsRUFFcENILGNBRm9DLEVBRzFDRCxvQkFIMEMsRUFHcEJELGtCQUhvQixFQUkxQyxJQUFJRyxJQUFJLENBQUNHLElBQUwsSUFBYSxFQUFqQixDQUowQyxDQUF0QixFQUtuQjtBQUNEQyxJQUFBQSxHQUFHLEVBQUUsOEJBQWdCSixJQUFJLENBQUNJLEdBQXJCO0FBREosR0FMbUIsQ0FBdEI7QUFRQSxRQUFNSCxhQUFhLENBQUNJLEtBQWQsQ0FBb0IsQ0FBcEIsQ0FBTjtBQUNBLFNBQU9KLGFBQVA7QUFDRCxDQVhEOztBQWtCQU4sY0FBYyxDQUFDVyxtQkFBZixHQUFxQyxlQUFlQSxtQkFBZixDQUFvQ0MsZ0JBQXBDLEVBQXNEO0FBQ3pGLFFBQU1DLE1BQU0sR0FBRyxNQUFNLEtBQUtDLElBQUwsQ0FBVSxDQUFDLFFBQUQsRUFBVyxTQUFYLEVBQXNCRixnQkFBdEIsRUFBd0MsUUFBeEMsQ0FBVixDQUFyQjs7QUFDQSxNQUFJO0FBQ0YsVUFBTUcsTUFBTSxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0osTUFBWCxDQUFmO0FBQ0EsV0FBT0UsTUFBTSxDQUFDRyxxQkFBZDtBQUNELEdBSEQsQ0FHRSxPQUFPQyxDQUFQLEVBQVU7QUFDVixVQUFNLElBQUlDLEtBQUosQ0FBVyxvQkFBbUJQLE1BQU8sb0JBQXJDLENBQU47QUFDRDtBQUNGLENBUkQ7O0FBY0FiLGNBQWMsQ0FBQ3FCLGlCQUFmLEdBQW1DLGVBQWVBLGlCQUFmLEdBQW9DO0FBQ3JFLFFBQU1DLE9BQU8sR0FBRyxnQ0FBaUIsTUFBTSxLQUFLUixJQUFMLENBQVUsQ0FBQyxRQUFELEVBQVcsTUFBWCxFQUFtQixRQUFuQixDQUFWLENBQXZCLEVBQWhCO0FBQ0EsU0FBT1EsT0FBTyxDQUFDQyxHQUFSLENBQVlDLE1BQU0sSUFBSUEsTUFBTSxDQUFDQyxTQUE3QixDQUFQO0FBQ0QsQ0FIRDs7ZUFNZXpCLGMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmaXhPdXRwdXRUb0FycmF5LCBjb252ZXJ0VG9JREJFbnYgfSBmcm9tICcuLi9oZWxwZXJzJztcblxuY29uc3QgeGN0ZXN0Q29tbWFuZHMgPSB7fTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBSdW5PcHRpb25zXG4gKlxuICogQHByb3BlcnR5IHtPYmplY3R9IGVudiBFbnZpcm9ubWVudCB2YXJpYWJsZXMgbWFwIHRvIGJlIHBhc3NlZCB0byB0aGUgdGVzdCBydW5uZXJcbiAqIEBwcm9wZXJ0eSB7QXJyYXl9IGFyZ3MgQXJndW1lbnRzIGFycmF5IHRvIGJlIHBhc3NlZCB0byB0aGUgdGVzdCBydW5uZXJcbiAqL1xuXG4vKipcbiAqIFJ1bnMgYW4geGN1aXRlc3Qgb24gdGhlIGRldmljZSBvciBzaW11bGF0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXN0UnVubmVyQnVuZGxlSWQgVGhlIGJ1bmRsZSBpZCBvZiB0aGUgdGVzdCBydW5uZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBVbmRlclRlc3RCdW5kbGVJZCBUaGUgYnVuZGxlIGlkIG9mIHRoZSBhcHAgdW5kZXIgdGVzdFxuICogQHBhcmFtIHtzdHJpbmd9IHhjdGVzdEJ1bmRsZUlkIFRoZSBidW5kbGUgaWQgb2YgdGhlIHhjdGVzdCBwYWNrYWdlXG4gKiBAcGFyYW0ge1J1bk9wdGlvbnN9IG9wdHMgVGhlIGVudnMgYW5kIGFyZ3MgdG8gYmUgcGFzc2VkIHRvIHRoZSB4Y3VpdGVzdCBydW5uZXJcbiAqIEByZXR1cm5zIHtTdWJQcm9jZXNzfVxuICovXG54Y3Rlc3RDb21tYW5kcy5ydW5YQ1VJVGVzdCA9IGFzeW5jIGZ1bmN0aW9uIHJ1blhDVUlUZXN0ICh0ZXN0UnVubmVyQnVuZGxlSWQsIGFwcFVuZGVyVGVzdEJ1bmRsZUlkLCB4Y3Rlc3RCdW5kbGVJZCwgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IHVpVGVzdFByb2Nlc3MgPSB0aGlzLmNyZWF0ZVN1YlByb2Nlc3MoW1xuICAgICd4Y3Rlc3QnLCAncnVuJyxcbiAgICAndWknLCB4Y3Rlc3RCdW5kbGVJZCxcbiAgICBhcHBVbmRlclRlc3RCdW5kbGVJZCwgdGVzdFJ1bm5lckJ1bmRsZUlkLFxuICAgIC4uLihvcHRzLmFyZ3MgfHwgW10pXG4gIF0sIHtcbiAgICBlbnY6IGNvbnZlcnRUb0lEQkVudihvcHRzLmVudilcbiAgfSk7XG4gIGF3YWl0IHVpVGVzdFByb2Nlc3Muc3RhcnQoMCk7XG4gIHJldHVybiB1aVRlc3RQcm9jZXNzO1xufTtcblxuLyoqXG4gKiBJbnN0YWxscyBhIHhjdGVzdCBidW5kbGUgb24gdGhlIGRldmljZSBvciBzaW11bGF0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSB4Y3Rlc3RCdW5kbGVQYXRoIHRoZSBwYXRoIG9mIHRoZSB4Y3Rlc3QgYnVuZGxlXG4gKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgYnVuZGxlIGlkIG9mIHhjdGVzdCBidW5kbGUgdGhhdCB3YXMgaW5zdGFsbGVkXG4gKi9cbnhjdGVzdENvbW1hbmRzLmluc3RhbGxYQ1Rlc3RCdW5kbGUgPSBhc3luYyBmdW5jdGlvbiBpbnN0YWxsWENUZXN0QnVuZGxlICh4Y3Rlc3RCdW5kbGVQYXRoKSB7XG4gIGNvbnN0IG91dHB1dCA9IGF3YWl0IHRoaXMuZXhlYyhbJ3hjdGVzdCcsICdpbnN0YWxsJywgeGN0ZXN0QnVuZGxlUGF0aCwgJy0tanNvbiddKTtcbiAgdHJ5IHtcbiAgICBjb25zdCBvYmplY3QgPSBKU09OLnBhcnNlKG91dHB1dCk7XG4gICAgcmV0dXJuIG9iamVjdC5pbnN0YWxsZWRUZXN0QnVuZGxlSWQ7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBwYXJzZSAnJHtvdXRwdXR9JyBpbnRvIGpzb24gb2JqZWN0YCk7XG4gIH1cbn07XG5cbi8qKlxuICogTGlzdHMgYWxsIHRoZSB4Y3Rlc3QgYnVuZGxlcyBpbnN0YWxsZWQgb24gYSBkZXZpY2Ugb3IgYSBzaW11bGF0b3JcbiAqIEByZXR1cm5zIHtBcnJheS48c3RyaW5nPn0gdGhlIGxpc3Qgb2YgdGhlIHhjdGVzdCBidW5kbGUgaWRzXG4gKi9cbnhjdGVzdENvbW1hbmRzLmxpc3RYQ1Rlc3RCdW5kbGVzID0gYXN5bmMgZnVuY3Rpb24gbGlzdFhDVGVzdEJ1bmRsZXMgKCkge1xuICBjb25zdCBidW5kbGVzID0gZml4T3V0cHV0VG9BcnJheShhd2FpdCB0aGlzLmV4ZWMoWyd4Y3Rlc3QnLCAnbGlzdCcsICctLWpzb24nXSkpO1xuICByZXR1cm4gYnVuZGxlcy5tYXAoYnVuZGxlID0+IGJ1bmRsZS5idW5kbGVfaWQpO1xufTtcblxuXG5leHBvcnQgZGVmYXVsdCB4Y3Rlc3RDb21tYW5kcztcbiJdLCJmaWxlIjoibGliL3Rvb2xzL3hjdGVzdC1jb21tYW5kcy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
