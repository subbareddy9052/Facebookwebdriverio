"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _lodash = _interopRequireDefault(require("lodash"));

var _shellQuote = require("shell-quote");

var _asyncbox = require("asyncbox");

var _helpers = require("../helpers");

var _logger = _interopRequireDefault(require("../logger.js"));

const PROCESS_INIT_TIMEOUT = 5000;

const COMPANION_PGREP_PATTERN = udid => `${_helpers.IDB_COMPANION_EXECUTABLE}.*--udid[[:space:]]+${udid}`;

const COMPANION_STARTUP_REGEXP = /Started GRPC server on port (\d+)/;
const COMPANION_STARTUP_ERROR_REGEXP = /New Error Built ==> (.+)/;

function buildDaemonArgs(opts = {}) {
  const {
    port,
    grpcPort
  } = opts;
  const result = ['daemon', '--notifier-path', _helpers.IDB_COMPANION_EXECUTABLE];

  if (port) {
    result.push('--port', port);
  }

  if (grpcPort) {
    result.push('--grpc-port', grpcPort);
  }

  return result;
}

const systemCallMethods = {};

systemCallMethods.connect = async function connect(opts = {}) {
  const {
    onlineTimeout
  } = opts;

  _logger.default.debug(`Connecting ${_helpers.IDB_EXECUTABLE} service to '${this.udid}'`);

  const binaryPaths = {};

  for (const binary of [_helpers.IDB_EXECUTABLE, _helpers.IDB_COMPANION_EXECUTABLE]) {
    try {
      binaryPaths[binary] = await _appiumSupport.fs.which(binary);
    } catch (e) {
      throw new Error(`'${binary}' has not been found in PATH. ` + `Is it installed? Read https://www.fbidb.io for more details`);
    }
  }

  let port = _helpers.DEFAULT_COMPANION_GRPC_PORT;

  try {
    _logger.default.debug(`Starting companion: '${binaryPaths[_helpers.IDB_COMPANION_EXECUTABLE]}'`);

    const companionProc = new _teen_process.SubProcess(binaryPaths[_helpers.IDB_COMPANION_EXECUTABLE], ['--udid', this.udid]);
    companionProc.on('exit', (code, signal) => {
      _logger.default.debug(`Companion exited with code '${code}' from signal '${signal}'`);
    });

    if (this.verbose) {
      companionProc.on('lines-stdout', function (lines) {
        for (let line of lines) {
          line = line.trim();

          if (line) {
            _logger.default.debug(`[Companion stdout] ${line}`);
          }
        }
      });
      companionProc.on('lines-stderr', function (lines) {
        for (let line of lines) {
          line = line.trim();

          if (line) {
            _logger.default.debug(`[Companion stderr] ${line}`);
          }
        }
      });
    }

    await companionProc.start(function (stdout, stderr) {
      const out = stdout || stderr;
      const readyMatch = COMPANION_STARTUP_REGEXP.exec(out);

      if (readyMatch) {
        port = readyMatch[1];
        return true;
      }

      const errorMatch = COMPANION_STARTUP_ERROR_REGEXP.exec(out);

      if (errorMatch) {
        throw new Error(errorMatch[1]);
      }

      return false;
    });
  } catch (err) {
    _logger.default.error(`Failed to start ${_helpers.IDB_COMPANION_EXECUTABLE}: ${err.message}`);

    throw err;
  }

  _logger.default.debug(`Companion running on port '${port}'`);

  try {
    try {
      await (0, _teen_process.exec)(_helpers.IDB_EXECUTABLE, ['connect', 'localhost', port]);
    } catch (connectionError) {
      await (0, _asyncbox.retryInterval)(2, 100, async () => {
        await this.disconnect();

        try {
          await (0, _teen_process.exec)(_helpers.IDB_EXECUTABLE, ['kill']);
        } catch (ign) {}

        let isStartupMonitorEnabled = true;

        try {
          const daemon = new _teen_process.SubProcess(_helpers.IDB_EXECUTABLE, buildDaemonArgs(this.executable));
          let daemonOutput = '';
          daemon.on('output', (stdout, stderr) => {
            if (isStartupMonitorEnabled && _lodash.default.trim(stdout || stderr)) {
              daemonOutput += `[daemon] ${stdout || stderr}\n`;
            }
          });

          try {
            await daemon.start(null, PROCESS_INIT_TIMEOUT);
            await _bluebird.default.delay(300);
          } catch (ign) {}

          if (daemon.isRunning) {
            _logger.default.debug(`${_helpers.IDB_EXECUTABLE} daemon started on port ${this.executable.port || _helpers.DEFAULT_IDB_PORT}`);
          } else {
            if (!daemonOutput.includes('address already in use')) {
              const message = `${_helpers.IDB_EXECUTABLE} daemon has failed to start: ${daemonOutput}`;

              _logger.default.warn(message);

              throw new Error(message);
            }

            _logger.default.debug(`The port ${this.executable.port || _helpers.DEFAULT_IDB_PORT} is already in use. ` + `Assuming it is used by ${_helpers.IDB_EXECUTABLE} daemon`);
          }

          await (0, _teen_process.exec)(_helpers.IDB_EXECUTABLE, ['connect', this.udid]);
        } catch (connectionError2) {
          if (connectionError2.stderr || connectionError2.stdout) {
            _logger.default.debug(connectionError2.stderr || connectionError2.stdout);
          }

          throw connectionError2;
        } finally {
          isStartupMonitorEnabled = false;
        }
      });
    }
  } catch (e) {
    if (e.stderr) {
      _logger.default.debug(e.stderr);
    }

    throw new Error(`Cannot start ${_helpers.IDB_EXECUTABLE} service for '${this.udid}'. ` + `Check the server log for more details.`);
  }

  _logger.default.info(`Successfully established the connection to ${_helpers.IDB_EXECUTABLE} service for '${this.udid}'`);

  if (onlineTimeout) {
    await this.waitForDevice(onlineTimeout);
  }

  this.executable.path = binaryPaths[_helpers.IDB_EXECUTABLE];
  this.companion.path = binaryPaths[_helpers.IDB_COMPANION_EXECUTABLE];
};

systemCallMethods.waitForDevice = async function waitForDevice(timeoutMs = 10000) {
  if (!timeoutMs) {
    _logger.default.debug('No timeout is provided, so not waiting until the device is online');

    return;
  }

  _logger.default.debug(`Waiting up to ${timeoutMs}ms for the device to be online`);

  const timer = new _appiumSupport.timing.Timer().start();

  try {
    await (0, _asyncbox.waitForCondition)(async () => {
      try {
        await this.exec(['ui', 'describe-all']);
        return true;
      } catch (e) {
        return false;
      }
    }, {
      waitMs: timeoutMs,
      intervalMs: 300
    });
  } catch (e) {
    throw new Error(`The device '${this.udid}' is not responding to idb requests after ${timeoutMs}ms timeout. ` + `Original error: ${e.stderr || e.message}`);
  }

  _logger.default.debug(`The device '${this.udid}' is online and ready to accept idb commands in ` + `${timer.getDuration().asSeconds.toFixed(3)}s`);
};

systemCallMethods.disconnect = async function disconnect() {
  _logger.default.debug(`Disconnecting ${_helpers.IDB_EXECUTABLE} service from '${this.udid}'`);

  try {
    await (0, _teen_process.exec)(this.executable.path, ['disconnect', this.udid]);
  } catch (ign) {}

  const companionPids = await (0, _helpers.getPids)(COMPANION_PGREP_PATTERN(this.udid));

  if (_lodash.default.isEmpty(companionPids)) {
    return;
  }

  _logger.default.debug(`Cleaning up ${companionPids.length} obsolete ${_helpers.IDB_COMPANION_EXECUTABLE} ` + `process${companionPids.length === 1 ? '' : 'es'}`);

  await (0, _teen_process.exec)('kill', ['-2', ...companionPids]);
};

systemCallMethods.exec = async function exec(cmd, opts = {}) {
  if (!cmd) {
    throw new Error('You need to pass in a command to exec()');
  }

  cmd = _lodash.default.isArray(cmd) ? cmd : [cmd];
  opts = _lodash.default.cloneDeep(opts);
  opts.timeout = opts.timeout || this.execTimeout || _helpers.DEFAULT_IDB_EXEC_TIMEOUT;
  opts.timeoutCapName = opts.timeoutCapName || 'execTimeout';
  const args = [...cmd, ...this.executable.defaultArgs];

  _logger.default.debug(`Running '${this.executable.path} ${(0, _shellQuote.quote)(args)}'`);

  try {
    const {
      stdout
    } = await (0, _teen_process.exec)(this.executable.path, args, opts);
    return stdout;
  } catch (e) {
    if (_appiumSupport.util.hasValue(e.code)) {
      e.message = `Error executing ${_helpers.IDB_EXECUTABLE}. Original error: '${e.message}'; ` + `Stdout: '${(e.stdout || '').trim()}'; ` + `Stderr: '${(e.stderr || '').trim()}'; ` + `Code: '${e.code}'`;
    } else {
      e.message = `Error executing ${_helpers.IDB_EXECUTABLE}. Original error: '${e.message}'. ` + `Try to increase the ${opts.timeout}ms ${_helpers.IDB_EXECUTABLE} execution timeout represented by '${opts.timeoutCapName}' capability`;
    }

    throw e;
  }
};

systemCallMethods.createSubProcess = function createSubProcess(args = [], opts = {}) {
  const idbArgs = [...args, ...this.executable.defaultArgs];

  _logger.default.debug(`Creating ${_helpers.IDB_EXECUTABLE} subprocess with args: ${(0, _shellQuote.quote)(args)}`);

  return new _teen_process.SubProcess(this.executable.path, idbArgs, opts);
};

var _default = systemCallMethods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
