"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("../logger"));

var _utils = require("../utils");

var _asyncbox = require("asyncbox");

var _os = _interopRequireDefault(require("os"));

let commands = {};
exports.commands = commands;
const PERF_RECORD_FEAT_NAME = 'perf_record';
const PERF_RECORD_SECURITY_MESSAGE = 'Performance measurement requires relaxing security for simulator. ' + `Please set '--relaxed-security' or '--allow-insecure' with '${PERF_RECORD_FEAT_NAME}' ` + 'referencing https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/security.md for more details.';
const DEFAULT_TIMEOUT_MS = 5 * 60 * 1000;
const STOP_TIMEOUT_MS = 3 * 60 * 1000;
const STARTUP_TIMEOUT_MS = 15 * 1000;
const DEFAULT_PROFILE_NAME = 'Activity Monitor';
const DEFAULT_EXT = 'trace';
const DEFAULT_PID = 'current';
const INSTRUMENTS_BINARY = 'instruments';

async function requireInstruments() {
  try {
    return await _appiumSupport.fs.which(INSTRUMENTS_BINARY);
  } catch (e) {
    _logger.default.errorAndThrow(`${INSTRUMENTS_BINARY} has not been found in PATH. ` + `Please make sure Xcode development tools are installed`);
  }
}

class PerfRecorder {
  constructor(reportPath, udid, opts = {}) {
    this._process = null;
    this._reportPath = reportPath;
    this._zippedReportPath = '';
    this._timeout = opts.timeout && opts.timeout > 0 ? opts.timeout : DEFAULT_TIMEOUT_MS;
    this._profileName = opts.profileName || DEFAULT_PROFILE_NAME;
    this._pid = opts.pid;
    this._udid = udid;
    this._logger = _appiumSupport.logger.getLogger(`${_lodash.default.truncate(this._profileName, {
      length: 10
    })}@${this._udid.substring(0, 8)}`);
    this._archivePromise = null;
  }

  get profileName() {
    return this._profileName;
  }

  async getOriginalReportPath() {
    return (await _appiumSupport.fs.exists(this._reportPath)) ? this._reportPath : '';
  }

  async getZippedReportPath() {
    if (await _appiumSupport.fs.exists(this._zippedReportPath)) {
      return this._zippedReportPath;
    }

    const originalReportPath = await this.getOriginalReportPath();

    if (!originalReportPath) {
      return '';
    }

    const zippedReportPath = originalReportPath.replace(`.${DEFAULT_EXT}`, '.zip');

    if (!this._archivePromise) {
      this._archivePromise = _appiumSupport.zip.toArchive(zippedReportPath, {
        cwd: originalReportPath
      });
    }

    await this._archivePromise;
    this._zippedReportPath = zippedReportPath;
    return this._zippedReportPath;
  }

  isRunning() {
    var _this$_process;

    return !!((_this$_process = this._process) === null || _this$_process === void 0 ? void 0 : _this$_process.isRunning);
  }

  async _enforceTermination() {
    if (this._process && this.isRunning()) {
      this._logger.debug('Force-stopping the currently running perf recording');

      try {
        await this._process.stop('SIGKILL');
      } catch (ign) {}
    }

    this._process = null;

    if (this._archivePromise) {
      this._archivePromise.then(() => _appiumSupport.fs.rimraf(this._zippedReportPath)).finally(() => {
        this._archivePromise = null;
      }).catch(() => {});
    } else {
      await _appiumSupport.fs.rimraf(this._zippedReportPath);
    }

    await _appiumSupport.fs.rimraf(this._reportPath);
    return '';
  }

  async start() {
    const instruments = await requireInstruments();
    const args = ['-w', this._udid, '-t', this._profileName, '-D', this._reportPath, '-l', `${this._timeout}`];

    if (this._pid) {
      args.push('-p', `${this._pid}`);
    }

    const fullCmd = [instruments, ...args];
    this._process = new _teen_process.SubProcess(fullCmd[0], fullCmd.slice(1));
    this._archivePromise = null;

    this._logger.debug(`Starting ${INSTRUMENTS_BINARY}: ${_appiumSupport.util.quote(fullCmd)}`);

    this._process.on('output', (stdout, stderr) => {
      if (_lodash.default.trim(stdout || stderr)) {
        this._logger.debug(`[${INSTRUMENTS_BINARY}] ${stdout || stderr}`);
      }
    });

    this._process.once('exit', async (code, signal) => {
      this._process = null;

      if (code === 0) {
        this._logger.debug('Performance recording exited without errors');

        try {
          await this.getZippedReportPath();
        } catch (e) {
          this._logger.warn(e);
        }
      } else {
        await this._enforceTermination();

        this._logger.warn(`Performance recording exited with error code ${code}, signal ${signal}`);
      }
    });

    await this._process.start(0);

    try {
      await (0, _asyncbox.waitForCondition)(async () => {
        if (await this.getOriginalReportPath()) {
          return true;
        }

        if (!this._process) {
          throw new Error(`${INSTRUMENTS_BINARY} process died unexpectedly`);
        }

        return false;
      }, {
        waitMs: STARTUP_TIMEOUT_MS,
        intervalMs: 500
      });
    } catch (e) {
      await this._enforceTermination();

      this._logger.errorAndThrow(`There is no .${DEFAULT_EXT} file found for performance profile ` + `'${this._profileName}'. Make sure the profile is supported on this device. ` + `You could use 'instruments -s' command to see the list of all available profiles. ` + `Check the server log for more details`);
    }

    this._logger.info(`The performance recording has started. Will timeout in ${this._timeout}ms`);
  }

  async stop(force = false) {
    if (force) {
      return await this._enforceTermination();
    }

    if (!this.isRunning()) {
      this._logger.debug('Performance recording is not running. Returning the recent result');

      return await this.getZippedReportPath();
    }

    try {
      await this._process.stop('SIGINT', STOP_TIMEOUT_MS);
    } catch (e) {
      this._logger.errorAndThrow(`Performance recording has failed to exit after ${STOP_TIMEOUT_MS}ms`);
    }

    return await this.getZippedReportPath();
  }

}

commands.mobileStartPerfRecord = async function mobileStartPerfRecord(opts = {}) {
  if (!this.isFeatureEnabled(PERF_RECORD_FEAT_NAME) && !this.isRealDevice()) {
    _logger.default.errorAndThrow(PERF_RECORD_SECURITY_MESSAGE);
  }

  const {
    timeout = DEFAULT_TIMEOUT_MS,
    profileName = DEFAULT_PROFILE_NAME,
    pid
  } = opts;

  if (!_lodash.default.isEmpty(this._perfRecorders)) {
    const recorders = this._perfRecorders.filter(x => x.profileName === profileName);

    if (!_lodash.default.isEmpty(recorders)) {
      for (const recorder of recorders) {
        if (recorder.isRunning()) {
          _logger.default.debug(`Performance recorder for '${profileName}' on device '${this.opts.device.udid}' ` + ` is already running. Doing nothing`);

          return;
        }

        _lodash.default.pull(this._perfRecorders, recorder);

        await recorder.stop(true);
      }
    }
  }

  const reportPath = _path.default.resolve(_os.default.tmpdir(), `appium_perf_${profileName.replace(/\W/g, '_')}_${_appiumSupport.util.uuidV4().substring(0, 8)}.${DEFAULT_EXT}`);

  let realPid;

  if (pid) {
    if (_lodash.default.toLower(pid) === DEFAULT_PID) {
      const appInfo = await this.proxyCommand('/wda/activeAppInfo', 'GET');
      realPid = appInfo.pid;
    } else {
      realPid = pid;
    }
  }

  const recorder = new PerfRecorder(reportPath, this.opts.device.udid, {
    timeout: parseInt(timeout, 10),
    profileName,
    pid: parseInt(realPid, 10)
  });
  await recorder.start();
  this._perfRecorders = [...(this._perfRecorders || []), recorder];
};

commands.mobileStopPerfRecord = async function mobileStopPerfRecord(opts = {}) {
  if (!this.isFeatureEnabled(PERF_RECORD_FEAT_NAME) && !this.isRealDevice()) {
    _logger.default.errorAndThrow(PERF_RECORD_SECURITY_MESSAGE);
  }

  if (_lodash.default.isEmpty(this._perfRecorders)) {
    _logger.default.info('No performance recorders have been started. Doing nothing');

    return '';
  }

  const {
    remotePath,
    user,
    pass,
    method,
    profileName = DEFAULT_PROFILE_NAME
  } = opts;

  const recorders = this._perfRecorders.filter(x => x.profileName === profileName);

  if (_lodash.default.isEmpty(recorders)) {
    _logger.default.errorAndThrow(`There are no records for performance profile '${profileName}' ` + `and device ${this.opts.device.udid}. Have you started the profiling before?`);
  }

  const resultPath = await recorders[0].stop();

  if (!(await _appiumSupport.fs.exists(resultPath))) {
    _logger.default.errorAndThrow(`There is no .${DEFAULT_EXT} file found for performance profile '${profileName}' ` + `and device ${this.opts.device.udid}. Make sure the profile is supported on this device. ` + `You could use 'instruments -s' command to see the list of all available profiles.`);
  }

  return await (0, _utils.encodeBase64OrUpload)(resultPath, remotePath, {
    user,
    pass,
    method
  });
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
