"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumIosDriver = require("appium-ios-driver");

var _appiumBaseDriver = require("appium-base-driver");

let extensions = {};
Object.assign(extensions, _appiumIosDriver.iosCommands.execute);
const iosExecute = extensions.execute;

extensions.execute = async function execute(script, args) {
  if (!script.match(/^mobile:/) && !this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  return await iosExecute.call(this, script, args);
};

extensions.executeAsync = async function executeAsync(script, args) {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  args = this.convertElementsForAtoms(args);
  this.asyncWaitMs = this.asyncWaitMs || 0;
  const promise = this.remote.executeAtomAsync('execute_async_script', [script, args, this.asyncWaitMs], this.curWebFrames);
  return await this.waitForAtom(promise);
};

extensions.executeMobile = async function executeMobile(mobileCommand, opts = {}) {
  const commandMap = {
    tap: 'mobileTap',
    scroll: 'mobileScroll',
    selectPickerWheelValue: 'mobileSelectPickerWheelValue',
    swipe: 'mobileSwipe',
    pinch: 'mobilePinch',
    doubleTap: 'mobileDoubleTap',
    twoFingerTap: 'mobileTwoFingerTap',
    tapWithNumberOfTaps: 'mobileTapWithNumberOfTaps',
    touchAndHold: 'mobileTouchAndHold',
    dragFromToForDuration: 'mobileDragFromToForDuration',
    rotateElement: 'mobileRotateElement',
    alert: 'mobileHandleAlert',
    setPasteboard: 'mobileSetPasteboard',
    getPasteboard: 'mobileGetPasteboard',
    source: 'mobileGetSource',
    getContexts: 'mobileGetContexts',
    installApp: 'mobileInstallApp',
    isAppInstalled: 'mobileIsAppInstalled',
    removeApp: 'mobileRemoveApp',
    launchApp: 'mobileLaunchApp',
    terminateApp: 'mobileTerminateApp',
    queryAppState: 'mobileQueryAppState',
    activateApp: 'mobileActivateApp',
    viewportScreenshot: 'getViewportScreenshot',
    startPerfRecord: 'mobileStartPerfRecord',
    stopPerfRecord: 'mobileStopPerfRecord',
    installCertificate: 'mobileInstallCertificate',
    startLogsBroadcast: 'mobileStartLogsBroadcast',
    stopLogsBroadcast: 'mobileStopLogsBroadcast',
    batteryInfo: 'mobileGetBatteryInfo',
    deviceInfo: 'mobileGetDeviceInfo',
    getDeviceTime: 'mobileGetDeviceTime',
    activeAppInfo: 'mobileGetActiveAppInfo',
    pressButton: 'mobilePressButton',
    enrollBiometric: 'mobileEnrollBiometric',
    sendBiometricMatch: 'mobileSendBiometricMatch',
    isBiometricEnrolled: 'mobileIsBiometricEnrolled',
    clearKeychains: 'mobileClearKeychains',
    getPermission: 'mobileGetPermission',
    setPermission: 'mobileSetPermissions',
    getAppearance: 'mobileGetAppearance',
    setAppearance: 'mobileSetAppearance',
    siriCommand: 'mobileSiriCommand',
    deleteFile: 'mobileDeleteFile',
    deleteFolder: 'mobileDeleteFolder'
  };

  if (!_lodash.default.has(commandMap, mobileCommand)) {
    throw new _appiumBaseDriver.errors.UnknownCommandError(`Unknown mobile command '${mobileCommand}'. Only ${_lodash.default.keys(commandMap).join(', ')} commands are supported.`);
  }

  return await this[commandMap[mobileCommand]](opts);
};

var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
