"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildServerSigningConfig = buildServerSigningConfig;
exports.default = exports.GRADLE_DEPENDENCIES_PLACEHOLDER = exports.GRADLE_URL_TEMPLATE = exports.VERSION_KEYS = exports.ServerBuilder = void 0;

require("source-map-support/register");

var _teen_process = require("teen_process");

var _appiumSupport = require("appium-support");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _path = _interopRequireDefault(require("path"));

var _os = require("os");

const GRADLE_VERSION_KEY = 'gradle';
const GRADLE_URL_PREFIX = 'distributionUrl=';
const GRADLE_URL_TEMPLATE = 'https\\://services.gradle.org/distributions/gradle-VERSION-all.zip';
exports.GRADLE_URL_TEMPLATE = GRADLE_URL_TEMPLATE;
const GRADLE_MAX_ERROR_LOG_LINES = 15;
const GRADLE_DEPENDENCIES_PLACEHOLDER = '// additionalAppDependencies placeholder (don\'t change or delete this line)';
exports.GRADLE_DEPENDENCIES_PLACEHOLDER = GRADLE_DEPENDENCIES_PLACEHOLDER;
const VERSION_KEYS = [GRADLE_VERSION_KEY, 'androidGradlePlugin', 'compileSdk', 'buildTools', 'minSdk', 'targetSdk', 'kotlin'];
exports.VERSION_KEYS = VERSION_KEYS;

const gradleLog = _appiumSupport.logger.getLogger('Gradle');

function buildServerSigningConfig(args) {
  return {
    zipAlign: true,
    keystoreFile: args.keystoreFile,
    keystorePassword: args.keystorePassword,
    keyAlias: args.keyAlias,
    keyPassword: args.keyPassword
  };
}

class ServerBuilder {
  constructor(args = {}) {
    this.serverPath = args.serverPath;
    this.showGradleLog = args.showGradleLog;
    const buildConfiguration = args.buildConfiguration || {};
    const versionConfiguration = buildConfiguration.toolsVersions || {};
    this.serverVersions = _lodash.default.reduce(versionConfiguration, (acc, value, key) => {
      if (VERSION_KEYS.includes(key)) {
        acc[key] = value;
      } else {
        _logger.default.warn(`Got unexpected '${key}' in toolsVersion block of the build configuration`);
      }

      return acc;
    }, {});
    this.testAppPackage = args.testAppPackage;
    this.signingConfig = args.signingConfig;
    this.additionalAppDependencies = buildConfiguration.additionalAppDependencies || [];
  }

  async build() {
    if (this.serverVersions[GRADLE_VERSION_KEY]) {
      await this.setGradleWrapperVersion(this.serverVersions[GRADLE_VERSION_KEY]);
    }

    if (!Array.isArray(this.additionalAppDependencies)) {
      throw new Error('additionalAppDependencies must be an array');
    }

    if (!_lodash.default.isEmpty(this.additionalAppDependencies)) {
      await this.insertAdditionalAppDependencies(this.additionalAppDependencies);
    }

    await this.runBuildProcess();
  }

  getCommand() {
    const cmd = _appiumSupport.system.isWindows() ? 'gradlew.bat' : './gradlew';

    const buildProperty = (key, value) => value ? `-P${key}=${value}` : null;

    let args = VERSION_KEYS.filter(key => key !== GRADLE_VERSION_KEY).map(key => {
      const serverVersion = this.serverVersions[key];
      const gradleProperty = `appium${key.charAt(0).toUpperCase()}${key.slice(1)}`;
      return buildProperty(gradleProperty, serverVersion);
    }).filter(Boolean);

    if (this.signingConfig) {
      args.push(..._lodash.default.keys(this.signingConfig).map(key => [`appium${_lodash.default.upperFirst(key)}`, this.signingConfig[key]]).map(([k, v]) => buildProperty(k, v)).filter(Boolean));
    }

    if (this.testAppPackage) {
      args.push(buildProperty('appiumTargetPackage', this.testAppPackage));
    }

    args.push('assembleAndroidTest');
    return {
      cmd,
      args
    };
  }

  async setGradleWrapperVersion(version) {
    const propertiesPath = _path.default.resolve(this.serverPath, 'gradle', 'wrapper', 'gradle-wrapper.properties');

    const originalProperties = await _appiumSupport.fs.readFile(propertiesPath, 'utf8');
    const newProperties = this.updateGradleDistUrl(originalProperties, version);
    await _appiumSupport.fs.writeFile(propertiesPath, newProperties, 'utf8');
  }

  updateGradleDistUrl(propertiesContent, version) {
    return propertiesContent.replace(new RegExp(`^(${_lodash.default.escapeRegExp(GRADLE_URL_PREFIX)}).+$`, 'gm'), `$1${GRADLE_URL_TEMPLATE.replace('VERSION', version)}`);
  }

  async insertAdditionalAppDependencies(additionalAppDependencies) {
    const buildPath = _path.default.resolve(this.serverPath, 'app', 'build.gradle');

    const originalConfiguration = await _appiumSupport.fs.readFile(buildPath, 'utf8');
    const newConfiguration = this.updateDependencyLines(originalConfiguration, additionalAppDependencies);
    await _appiumSupport.fs.writeFile(buildPath, newConfiguration, 'utf8');
  }

  updateDependencyLines(configurationContent, additionalAppDependencies) {
    const dependencyLines = additionalAppDependencies.map(function (dependency) {
      if (/[\s'\\$]/.test(dependency)) {
        throw new Error('Single quotes, dollar characters and whitespace characters' + ` are disallowed in additional dependencies: ${dependency}`);
      }

      return `implementation '${dependency}'`;
    }).join('$1');
    return configurationContent.replace(new RegExp(`(\\s*^\\s*)${_lodash.default.escapeRegExp(GRADLE_DEPENDENCIES_PLACEHOLDER)}\\s*$`, 'gm'), `$1${dependencyLines}`);
  }

  async runBuildProcess() {
    const {
      cmd,
      args
    } = this.getCommand();

    _logger.default.debug(`Beginning build with command '${cmd} ${args.join(' ')}' ` + `in directory '${this.serverPath}'`);

    const gradlebuild = new _teen_process.SubProcess(cmd, args, {
      cwd: this.serverPath,
      stdio: ['ignore', 'pipe', 'pipe']
    });
    let buildLastLines = [];
    const logMsg = `Output from Gradle ${this.showGradleLog ? 'will' : 'will not'} be logged`;

    _logger.default.debug(`${logMsg}. To change this, use 'showGradleLog' desired capability`);

    gradlebuild.on('stream-line', line => {
      if (this.showGradleLog) {
        if (line.startsWith('[STDERR]')) {
          gradleLog.warn(line);
        } else {
          gradleLog.info(line);
        }
      }

      buildLastLines.push(`${_os.EOL}${line}`);

      if (buildLastLines.length > GRADLE_MAX_ERROR_LOG_LINES) {
        buildLastLines = buildLastLines.slice(-GRADLE_MAX_ERROR_LOG_LINES);
      }
    });

    try {
      await gradlebuild.start();
      await gradlebuild.join();
    } catch (err) {
      let msg = `Unable to build Espresso server - ${err.message}\n` + `Gradle error message:${_os.EOL}${buildLastLines}`;

      _logger.default.errorAndThrow(msg);
    }
  }

}

exports.ServerBuilder = ServerBuilder;
var _default = ServerBuilder;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
