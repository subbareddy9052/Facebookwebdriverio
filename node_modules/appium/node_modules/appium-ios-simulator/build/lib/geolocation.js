"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setLocationWithLyft = setLocationWithLyft;
exports.setLocationWithIdb = setLocationWithIdb;
exports.setLocationWithAppleScript = setLocationWithAppleScript;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _teen_process = require("teen_process");

var _appiumSupport = require("appium-support");

const LYFT_SET_LOCATION = 'set-simulator-location';

async function setLocationWithLyft(udid, latitude, longitude) {
  try {
    await _appiumSupport.fs.which(LYFT_SET_LOCATION);
  } catch (e) {
    throw new Error(`'${LYFT_SET_LOCATION}' binary has not been found in your PATH. ` + 'Please install it as "brew install lyft/formulae/set-simulator-location" by brew or ' + 'read https://github.com/lyft/set-simulator-location to set the binary by manual to ' + 'be able to set geolocation by the library.');
  }

  try {
    await (0, _teen_process.exec)(LYFT_SET_LOCATION, ['-c', latitude, longitude, '-u', udid]);
  } catch (e) {
    throw new Error(`Failed to set geolocation with '${LYFT_SET_LOCATION}'. ` + `Original error: ${e.stderr || e.message}`);
  }
}

async function setLocationWithIdb(idb, latitude, longitude) {
  if (idb) {
    try {
      await idb.setLocation(latitude, longitude);
    } catch (e) {
      throw new Error(`Failed to set geolocation with idb. Original error: ${e.stderr || e.message}`);
    }
  }

  throw new Error('Failed to set geolocation with idb because it is not installed');
}

async function setLocationWithAppleScript(sim, latitude, longitude) {
  const output = await sim.executeUIClientScript(`
    tell application "System Events"
      tell process "Simulator"
        set featureName to "Custom Location"
        set dstMenuItem to menu item (featureName & "â€¦") of menu 1 of menu item "Location" of menu 1 of menu bar item "Debug" of menu bar 1
        click dstMenuItem
        delay 1
        set value of text field 1 of window featureName to ${latitude} as string
        delay 0.5
        set value of text field 2 of window featureName to ${longitude} as string
        delay 0.5
        click button "OK" of window featureName
        delay 0.5
        set isInvisible to (not (exists (window featureName)))
      end tell
    end tell
  `);

  _logger.default.debug(`Geolocation parameters dialog accepted: ${output}`);

  if (_lodash.default.trim(output) !== 'true') {
    throw new Error(`Failed to set geolocation with AppleScript. Original error: ${output}`);
  }
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9nZW9sb2NhdGlvbi5qcyJdLCJuYW1lcyI6WyJMWUZUX1NFVF9MT0NBVElPTiIsInNldExvY2F0aW9uV2l0aEx5ZnQiLCJ1ZGlkIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJmcyIsIndoaWNoIiwiZSIsIkVycm9yIiwic3RkZXJyIiwibWVzc2FnZSIsInNldExvY2F0aW9uV2l0aElkYiIsImlkYiIsInNldExvY2F0aW9uIiwic2V0TG9jYXRpb25XaXRoQXBwbGVTY3JpcHQiLCJzaW0iLCJvdXRwdXQiLCJleGVjdXRlVUlDbGllbnRTY3JpcHQiLCJsb2ciLCJkZWJ1ZyIsIl8iLCJ0cmltIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTUEsaUJBQWlCLEdBQUcsd0JBQTFCOztBQVlBLGVBQWVDLG1CQUFmLENBQW9DQyxJQUFwQyxFQUEwQ0MsUUFBMUMsRUFBb0RDLFNBQXBELEVBQStEO0FBQzdELE1BQUk7QUFDRixVQUFNQyxrQkFBR0MsS0FBSCxDQUFTTixpQkFBVCxDQUFOO0FBQ0QsR0FGRCxDQUVFLE9BQU9PLENBQVAsRUFBVTtBQUNWLFVBQU0sSUFBSUMsS0FBSixDQUFXLElBQUdSLGlCQUFrQiw0Q0FBdEIsR0FDZCxzRkFEYyxHQUVkLHFGQUZjLEdBR2QsNENBSEksQ0FBTjtBQUlEOztBQUVELE1BQUk7QUFDRixVQUFNLHdCQUFLQSxpQkFBTCxFQUF3QixDQUM1QixJQUQ0QixFQUN0QkcsUUFEc0IsRUFDWkMsU0FEWSxFQUU1QixJQUY0QixFQUV0QkYsSUFGc0IsQ0FBeEIsQ0FBTjtBQUlELEdBTEQsQ0FLRSxPQUFPSyxDQUFQLEVBQVU7QUFDVixVQUFNLElBQUlDLEtBQUosQ0FBVyxtQ0FBa0NSLGlCQUFrQixLQUFyRCxHQUNiLG1CQUFrQk8sQ0FBQyxDQUFDRSxNQUFGLElBQVlGLENBQUMsQ0FBQ0csT0FBUSxFQURyQyxDQUFOO0FBRUQ7QUFDRjs7QUFZRCxlQUFlQyxrQkFBZixDQUFtQ0MsR0FBbkMsRUFBd0NULFFBQXhDLEVBQWtEQyxTQUFsRCxFQUE2RDtBQUMzRCxNQUFJUSxHQUFKLEVBQVM7QUFDUCxRQUFJO0FBQ0YsWUFBTUEsR0FBRyxDQUFDQyxXQUFKLENBQWdCVixRQUFoQixFQUEwQkMsU0FBMUIsQ0FBTjtBQUNELEtBRkQsQ0FFRSxPQUFPRyxDQUFQLEVBQVU7QUFDVixZQUFNLElBQUlDLEtBQUosQ0FBVyx1REFBc0RELENBQUMsQ0FBQ0UsTUFBRixJQUFZRixDQUFDLENBQUNHLE9BQVEsRUFBdkYsQ0FBTjtBQUNEO0FBQ0Y7O0FBQ0QsUUFBTSxJQUFJRixLQUFKLENBQVUsZ0VBQVYsQ0FBTjtBQUNEOztBQWFELGVBQWVNLDBCQUFmLENBQTJDQyxHQUEzQyxFQUFnRFosUUFBaEQsRUFBMERDLFNBQTFELEVBQXFFO0FBQ25FLFFBQU1ZLE1BQU0sR0FBRyxNQUFNRCxHQUFHLENBQUNFLHFCQUFKLENBQTJCOzs7Ozs7OzZEQU9XZCxRQUFTOzs2REFFVEMsU0FBVTs7Ozs7OztHQVRoRCxDQUFyQjs7QUFpQkFjLGtCQUFJQyxLQUFKLENBQVcsMkNBQTBDSCxNQUFPLEVBQTVEOztBQUNBLE1BQUlJLGdCQUFFQyxJQUFGLENBQU9MLE1BQVAsTUFBbUIsTUFBdkIsRUFBK0I7QUFDN0IsVUFBTSxJQUFJUixLQUFKLENBQVcsK0RBQThEUSxNQUFPLEVBQWhGLENBQU47QUFDRDtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgZXhlYyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgeyBmcyB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcblxuY29uc3QgTFlGVF9TRVRfTE9DQVRJT04gPSAnc2V0LXNpbXVsYXRvci1sb2NhdGlvbic7XG5cbi8qKlxuICogU2V0IGN1c3RvbSBnZW9sb2NhdGlvbiBwYXJhbWV0ZXJzIGZvciB0aGUgZ2l2ZW4gU2ltdWxhdG9yIHVzaW5nIExZRlRfU0VUX0xPQ0FUSU9OLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1ZGlkIC0gVGhlIHVkaWQgdG8gc2V0IHRoZSBnaXZlbiBnZW9sb2NhdGlvblxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBsYXRpdHVkZSAtIFRoZSBsYXRpdHVkZSB2YWx1ZSwgd2hpY2ggaXMgZ29pbmcgdG8gYmUgZW50ZXJlZFxuICogICBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIGVkaXQgZmllbGQsIGZvciBleGFtcGxlICczOSwwMDA2Jy5cbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gbG9uZ2l0dWRlIC0gVGhlIGxvbmdpdHVkZSB2YWx1ZSwgd2hpY2ggaXMgZ29pbmcgdG8gYmUgZW50ZXJlZFxuICogICBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIGVkaXQgZmllbGQsIGZvciBleGFtcGxlICcxOSwwMDY4Jy5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBpdCBmYWlsZWQgdG8gc2V0IHRoZSBsb2NhdGlvblxuICovXG5hc3luYyBmdW5jdGlvbiBzZXRMb2NhdGlvbldpdGhMeWZ0ICh1ZGlkLCBsYXRpdHVkZSwgbG9uZ2l0dWRlKSB7XG4gIHRyeSB7XG4gICAgYXdhaXQgZnMud2hpY2goTFlGVF9TRVRfTE9DQVRJT04pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGAnJHtMWUZUX1NFVF9MT0NBVElPTn0nIGJpbmFyeSBoYXMgbm90IGJlZW4gZm91bmQgaW4geW91ciBQQVRILiBgICtcbiAgICAgICdQbGVhc2UgaW5zdGFsbCBpdCBhcyBcImJyZXcgaW5zdGFsbCBseWZ0L2Zvcm11bGFlL3NldC1zaW11bGF0b3ItbG9jYXRpb25cIiBieSBicmV3IG9yICcgK1xuICAgICAgJ3JlYWQgaHR0cHM6Ly9naXRodWIuY29tL2x5ZnQvc2V0LXNpbXVsYXRvci1sb2NhdGlvbiB0byBzZXQgdGhlIGJpbmFyeSBieSBtYW51YWwgdG8gJyArXG4gICAgICAnYmUgYWJsZSB0byBzZXQgZ2VvbG9jYXRpb24gYnkgdGhlIGxpYnJhcnkuJyk7XG4gIH1cblxuICB0cnkge1xuICAgIGF3YWl0IGV4ZWMoTFlGVF9TRVRfTE9DQVRJT04sIFtcbiAgICAgICctYycsIGxhdGl0dWRlLCBsb25naXR1ZGUsXG4gICAgICAnLXUnLCB1ZGlkXG4gICAgXSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBzZXQgZ2VvbG9jYXRpb24gd2l0aCAnJHtMWUZUX1NFVF9MT0NBVElPTn0nLiBgICtcbiAgICAgIGBPcmlnaW5hbCBlcnJvcjogJHtlLnN0ZGVyciB8fCBlLm1lc3NhZ2V9YCk7XG4gIH1cbn1cblxuLyoqXG4gKiBTZXQgY3VzdG9tIGdlb2xvY2F0aW9uIHBhcmFtZXRlcnMgZm9yIHRoZSBnaXZlbiBTaW11bGF0b3IgdXNpbmcgaWRiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpZGIgLSBUaGUgSURCIGluc3RhbmNlXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IGxhdGl0dWRlIC0gVGhlIGxhdGl0dWRlIHZhbHVlLCB3aGljaCBpcyBnb2luZyB0byBiZSBlbnRlcmVkXG4gKiAgIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgZWRpdCBmaWVsZCwgZm9yIGV4YW1wbGUgJzM5LDAwMDYnLlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBsb25naXR1ZGUgLSBUaGUgbG9uZ2l0dWRlIHZhbHVlLCB3aGljaCBpcyBnb2luZyB0byBiZSBlbnRlcmVkXG4gKiAgIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgZWRpdCBmaWVsZCwgZm9yIGV4YW1wbGUgJzE5LDAwNjgnLlxuICogQHRocm93cyB7RXJyb3J9IElmIGl0IGZhaWxlZCB0byBzZXQgdGhlIGxvY2F0aW9uXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHNldExvY2F0aW9uV2l0aElkYiAoaWRiLCBsYXRpdHVkZSwgbG9uZ2l0dWRlKSB7XG4gIGlmIChpZGIpIHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgaWRiLnNldExvY2F0aW9uKGxhdGl0dWRlLCBsb25naXR1ZGUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHNldCBnZW9sb2NhdGlvbiB3aXRoIGlkYi4gT3JpZ2luYWwgZXJyb3I6ICR7ZS5zdGRlcnIgfHwgZS5tZXNzYWdlfWApO1xuICAgIH1cbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBzZXQgZ2VvbG9jYXRpb24gd2l0aCBpZGIgYmVjYXVzZSBpdCBpcyBub3QgaW5zdGFsbGVkJyk7XG59XG5cblxuLyoqXG4gKiBTZXQgY3VzdG9tIGdlb2xvY2F0aW9uIHBhcmFtZXRlcnMgZm9yIHRoZSBnaXZlbiBTaW11bGF0b3IgdXNpbmcgQXBwbGVTY3JpcHRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc2ltIC0gVGhlIFNpbXVsYXRvclhjb2RlIG9iamVjdFxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBsYXRpdHVkZSAtIFRoZSBsYXRpdHVkZSB2YWx1ZSwgd2hpY2ggaXMgZ29pbmcgdG8gYmUgZW50ZXJlZFxuICogICBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIGVkaXQgZmllbGQsIGZvciBleGFtcGxlICczOSwwMDA2Jy5cbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gbG9uZ2l0dWRlIC0gVGhlIGxvbmdpdHVkZSB2YWx1ZSwgd2hpY2ggaXMgZ29pbmcgdG8gYmUgZW50ZXJlZFxuICogICBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIGVkaXQgZmllbGQsIGZvciBleGFtcGxlICcxOSwwMDY4Jy5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBpdCBmYWlsZWQgdG8gc2V0IHRoZSBsb2NhdGlvblxuICovXG5hc3luYyBmdW5jdGlvbiBzZXRMb2NhdGlvbldpdGhBcHBsZVNjcmlwdCAoc2ltLCBsYXRpdHVkZSwgbG9uZ2l0dWRlKSB7XG4gIGNvbnN0IG91dHB1dCA9IGF3YWl0IHNpbS5leGVjdXRlVUlDbGllbnRTY3JpcHQoYFxuICAgIHRlbGwgYXBwbGljYXRpb24gXCJTeXN0ZW0gRXZlbnRzXCJcbiAgICAgIHRlbGwgcHJvY2VzcyBcIlNpbXVsYXRvclwiXG4gICAgICAgIHNldCBmZWF0dXJlTmFtZSB0byBcIkN1c3RvbSBMb2NhdGlvblwiXG4gICAgICAgIHNldCBkc3RNZW51SXRlbSB0byBtZW51IGl0ZW0gKGZlYXR1cmVOYW1lICYgXCLigKZcIikgb2YgbWVudSAxIG9mIG1lbnUgaXRlbSBcIkxvY2F0aW9uXCIgb2YgbWVudSAxIG9mIG1lbnUgYmFyIGl0ZW0gXCJEZWJ1Z1wiIG9mIG1lbnUgYmFyIDFcbiAgICAgICAgY2xpY2sgZHN0TWVudUl0ZW1cbiAgICAgICAgZGVsYXkgMVxuICAgICAgICBzZXQgdmFsdWUgb2YgdGV4dCBmaWVsZCAxIG9mIHdpbmRvdyBmZWF0dXJlTmFtZSB0byAke2xhdGl0dWRlfSBhcyBzdHJpbmdcbiAgICAgICAgZGVsYXkgMC41XG4gICAgICAgIHNldCB2YWx1ZSBvZiB0ZXh0IGZpZWxkIDIgb2Ygd2luZG93IGZlYXR1cmVOYW1lIHRvICR7bG9uZ2l0dWRlfSBhcyBzdHJpbmdcbiAgICAgICAgZGVsYXkgMC41XG4gICAgICAgIGNsaWNrIGJ1dHRvbiBcIk9LXCIgb2Ygd2luZG93IGZlYXR1cmVOYW1lXG4gICAgICAgIGRlbGF5IDAuNVxuICAgICAgICBzZXQgaXNJbnZpc2libGUgdG8gKG5vdCAoZXhpc3RzICh3aW5kb3cgZmVhdHVyZU5hbWUpKSlcbiAgICAgIGVuZCB0ZWxsXG4gICAgZW5kIHRlbGxcbiAgYCk7XG4gIGxvZy5kZWJ1ZyhgR2VvbG9jYXRpb24gcGFyYW1ldGVycyBkaWFsb2cgYWNjZXB0ZWQ6ICR7b3V0cHV0fWApO1xuICBpZiAoXy50cmltKG91dHB1dCkgIT09ICd0cnVlJykge1xuICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHNldCBnZW9sb2NhdGlvbiB3aXRoIEFwcGxlU2NyaXB0LiBPcmlnaW5hbCBlcnJvcjogJHtvdXRwdXR9YCk7XG4gIH1cbn1cblxuZXhwb3J0IHtcbiAgc2V0TG9jYXRpb25XaXRoTHlmdCwgc2V0TG9jYXRpb25XaXRoSWRiLCBzZXRMb2NhdGlvbldpdGhBcHBsZVNjcmlwdFxufTtcbiJdLCJmaWxlIjoibGliL2dlb2xvY2F0aW9uLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
