"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _simulatorXcode = require("./simulator-xcode-6");

var _simulatorXcode2 = _interopRequireDefault(require("./simulator-xcode-7"));

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _asyncbox = require("asyncbox");

var _teen_process = require("teen_process");

var _geolocation = require("./geolocation");

var _appiumSupport = require("appium-support");

var _utils = require("./utils");

const STARTUP_TIMEOUT = 120 * 1000;

const PROCESS_LAUNCH_OK_PATTERN = bundleId => new RegExp(`${bundleId.replace('.', '\\.')}:\\s+\\d+`);

class SimulatorXcode8 extends _simulatorXcode2.default {
  constructor(udid, xcodeVersion) {
    super(udid, xcodeVersion);
    this.isFreshFiles = ['Library/Cookies', 'Library/Preferences/.GlobalPreferences.plist', 'Library/Preferences/com.apple.springboard.plist', 'var/run/syslog.pid'];
    this._idb = null;
  }

  set idb(value) {
    this._idb = value;
  }

  get idb() {
    return this._idb;
  }

  async killUIClient(opts = {}) {
    let {
      pid,
      signal = 2
    } = opts;
    pid = pid || (await this.getUIClientPid());

    if (!pid) {
      return false;
    }

    _logger.default.debug(`Sending ${signal} kill signal to Simulator UI client with PID ${pid}`);

    try {
      await (0, _teen_process.exec)('kill', [`-${signal}`, pid]);
      return true;
    } catch (e) {
      if (e.code === 1) {
        return false;
      }

      throw new Error(`Cannot kill the Simulator UI client. Original error: ${e.message}`);
    }
  }

  async isAppInstalled(bundleId) {
    try {
      const appContainer = await this.simctl.getAppContainer(bundleId);
      return appContainer.endsWith('.app');
    } catch (err) {
      try {
        const info = await this.simctl.appInfo(bundleId);
        return info.includes('ApplicationType');
      } catch (e) {
        return false;
      }
    }
  }

  get startupTimeout() {
    return STARTUP_TIMEOUT;
  }

  async waitForBoot(startupTimeout) {
    await this.simctl.startBootMonitor({
      timeout: startupTimeout
    });
    this.emit(_simulatorXcode.BOOT_COMPLETED_EVENT);
  }

  async openUrl(url) {
    if (!(await this.isRunning())) {
      throw new Error(`Tried to open '${url}', but Simulator is not in Booted state`);
    }

    const timer = new _appiumSupport.timing.Timer().start();
    let lastError = null;

    try {
      await (0, _asyncbox.waitForCondition)(async () => {
        try {
          const stdout = await this.simctl.launchApp(_utils.MOBILE_SAFARI_BUNDLE_ID);

          if (PROCESS_LAUNCH_OK_PATTERN(_utils.MOBILE_SAFARI_BUNDLE_ID).test(stdout)) {
            await this.simctl.openUrl(url);
            return true;
          }
        } catch (err) {
          _logger.default.warn(`Failed to open '${url}' in Safari. Retrying...`);

          lastError = err.stderr || err.message;
        }

        return false;
      }, {
        waitMs: _utils.SAFARI_STARTUP_TIMEOUT,
        intervalMs: 500
      });
    } catch (err) {
      throw new Error(`Safari cannot open '${url}' after ${timer.getDuration().asSeconds.toFixed(3)}s ` + `because of: ${lastError || 'an unknown error'}`);
    }

    _logger.default.debug(`Safari successfully opened '${url}' in ${timer.getDuration().asSeconds.toFixed(3)}s`);
  }

  async cleanSafari(keepPrefs = true) {
    try {
      if (await this.isRunning()) {
        await this.simctl.terminateApp(_utils.MOBILE_SAFARI_BUNDLE_ID);
      }
    } catch (ign) {}

    await super.cleanSafari(keepPrefs);
  }

  async cleanCustomApp(appFile, appBundleId, scrub = false) {
    try {
      await this.simctl.terminateApp(appBundleId);
    } catch (ign) {}

    await super.cleanCustomApp(appFile, appBundleId, scrub);
  }

  async shake() {
    _logger.default.info(`Performing shake gesture on ${this.udid} Simulator`);

    await this.simctl.spawnProcess(['notifyutil', '-p', 'com.apple.UIKit.SimulatorShake']);
  }

  async _activateWindow() {
    if (this.idb) {
      return await this.idb.focusSimulator();
    }

    _logger.default.warn(`Cannot focus Simulator window with idb. Defaulting to AppleScript`);

    return await super._activateWindow();
  }

  async isBiometricEnrolled() {
    const output = await this.executeUIClientScript(`
      tell application "System Events"
        tell process "Simulator"
          set dstMenuItem to menu item "Toggle Enrolled State" of menu 1 of menu item "Touch ID" of menu 1 of menu bar item "Hardware" of menu bar 1
          set isChecked to (value of attribute "AXMenuItemMarkChar" of dstMenuItem) is "✓"
        end tell
      end tell
    `);

    _logger.default.debug(`Touch ID enrolled state: ${output}`);

    return _lodash.default.isString(output) && output.trim() === 'true';
  }

  async enrollBiometric(isEnabled = true) {
    await this.executeUIClientScript(`
      tell application "System Events"
        tell process "Simulator"
          set dstMenuItem to menu item "Toggle Enrolled State" of menu 1 of menu item "Touch ID" of menu 1 of menu bar item "Hardware" of menu bar 1
          set isChecked to (value of attribute "AXMenuItemMarkChar" of dstMenuItem) is "✓"
          if ${isEnabled ? 'not ' : ''}isChecked then
            click dstMenuItem
          end if
        end tell
      end tell
    `);
  }

  async sendBiometricMatch(shouldMatch = true) {
    await this.executeUIClientScript(`
      tell application "System Events"
        tell process "Simulator"
          set dstMenuItem to menu item "${shouldMatch ? 'Matching Touch' : 'Non-matching Touch'}" of menu 1 of menu item "Touch ID" of menu 1 of menu bar item "Hardware" of menu bar 1
          click dstMenuItem
        end tell
      end tell
    `);
  }

  async setGeolocation(latitude, longitude) {
    const locationSetters = [async () => await (0, _geolocation.setLocationWithLyft)(this.udid, latitude, longitude), async () => await (0, _geolocation.setLocationWithIdb)(this.idb, latitude, longitude), async () => await (0, _geolocation.setLocationWithAppleScript)(this, latitude, longitude)];
    let lastError;

    for (const setter of locationSetters) {
      try {
        await setter();
        return true;
      } catch (e) {
        _logger.default.info(e.message);

        lastError = e;
      }
    }

    throw lastError;
  }

}

var _default = SimulatorXcode8;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
