"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("./logger"));

var _tccDb = _interopRequireDefault(require("./tcc-db"));

var _shellQuote = require("shell-quote");

const STATUS_UNSET = 'unset';
const STATUS_YES = 'yes';
const STATUS_NO = 'no';
const WIX_SIM_UTILS = 'applesimutils';
const SERVICES = {
  calendar: 'kTCCServiceCalendar',
  camera: 'kTCCServiceCamera',
  contacts: 'kTCCServiceAddressBook',
  homekit: 'kTCCServiceWillow',
  microphone: 'kTCCServiceMicrophone',
  photos: 'kTCCServicePhotos',
  reminders: 'kTCCServiceReminders',
  medialibrary: 'kTCCServiceMediaLibrary',
  motion: 'kTCCServiceMotion',
  health: 'kTCCServiceMSO',
  siri: 'kTCCServiceSiri',
  speech: 'kTCCServiceSpeechRecognition'
};

function toInternalServiceName(serviceName) {
  if (_lodash.default.has(SERVICES, _lodash.default.toLower(serviceName))) {
    return SERVICES[_lodash.default.toLower(serviceName)];
  }

  throw new Error(`'${serviceName}' is unknown. Only the following service names are supported: ${JSON.stringify(_lodash.default.keys(SERVICES))}`);
}

function formatStatus(status) {
  return [STATUS_UNSET, STATUS_NO].includes(status) ? _lodash.default.toUpper(status) : status;
}

async function execWix(args) {
  try {
    await _appiumSupport.fs.which(WIX_SIM_UTILS);
  } catch (e) {
    throw new Error(`${WIX_SIM_UTILS} binary has not been found in your PATH. ` + `Please install it ('brew tap wix/brew && brew install wix/brew/applesimutils') to ` + `be able to change application permissions`);
  }

  _logger.default.debug(`Executing: ${WIX_SIM_UTILS} ${(0, _shellQuote.quote)(args)}`);

  try {
    const {
      stdout
    } = await (0, _teen_process.exec)(WIX_SIM_UTILS, args);

    _logger.default.debug(`Command output: ${stdout}`);

    return stdout;
  } catch (e) {
    throw new Error(`Cannot execute "${WIX_SIM_UTILS} ${(0, _shellQuote.quote)(args)}". Original error: ${e.stderr || e.message}`);
  }
}

class Permissions {
  constructor(xcodeVersion, sharedResourcesDir, udid) {
    this.tccDb = new _tccDb.default(xcodeVersion, sharedResourcesDir);
    this.udid = udid;
  }

  async setAccess(bundleId, permissionsMapping) {
    const permissionsArg = _lodash.default.toPairs(permissionsMapping).map(x => `${x[0]}=${formatStatus(x[1])}`).join(',');

    return await execWix(['--byId', this.udid, '--bundle', bundleId, '--setPermissions', permissionsArg]);
  }

  async getAccess(bundleId, serviceName) {
    serviceName = toInternalServiceName(serviceName);

    for (const [sqlValue, status] of [['0', STATUS_NO], ['1', STATUS_YES]]) {
      const count = await this.tccDb.execQuery(`SELECT count(*) FROM 'access' WHERE client='?' AND allowed=? AND service='?'`, bundleId, sqlValue, serviceName);

      if (parseInt(count.split('=')[1], 10) > 0) {
        return status;
      }
    }

    return STATUS_UNSET;
  }

}

var _default = Permissions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
