"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _simulatorXcode = _interopRequireDefault(require("./simulator-xcode-11"));

const NATIVE_SIMCTL_PERMISSIONS = ['all', 'calendar', 'contacts-limited', 'contacts', 'location', 'location-always', 'photos-add', 'photos', 'media-library', 'microphone', 'motion', 'reminders', 'siri'];

class SimulatorXcode11_4 extends _simulatorXcode.default {
  constructor(udid, xcodeVersion) {
    super(udid, xcodeVersion);
  }

  async setAppearance(value) {
    await this.simctl.setAppearance(_lodash.default.toLower(value));
  }

  async getAppearance() {
    return await this.simctl.getAppearance();
  }

  async addCertificate(payload, opts = {}) {
    const {
      isRoot = true
    } = opts;
    const methodName = isRoot ? 'addRootCertificate' : 'addCertificate';
    await this.simctl[methodName](payload, {
      raw: true
    });
    return true;
  }

  async pushNotification(payload) {
    await this.simctl.pushNotification(payload);
  }

  async setPermissions(bundleId, permissionsMapping) {
    _logger.default.debug(`Setting access for '${bundleId}': ` + JSON.stringify(permissionsMapping, null, 2));

    const nonNativePerms = {};

    for (let [permName, access] of _lodash.default.toPairs(permissionsMapping)) {
      if (!NATIVE_SIMCTL_PERMISSIONS.includes(permName)) {
        nonNativePerms[permName] = access;
        continue;
      }

      access = _lodash.default.toLower(access);

      if (permName === 'medialibrary') {
        permName = 'media-library';
      } else if (permName === 'location' && access === 'always') {
        permName = 'location-always';
      }

      switch (access) {
        case 'yes':
        case 'inuse':
        case 'always':
          await this.simctl.grantPermission(bundleId, permName);
          break;

        case 'no':
        case 'never':
          await this.simctl.revokePermission(bundleId, permName);
          break;

        case 'unset':
          await this.simctl.resetPermission(bundleId, permName);
          break;

        default:
          throw new Error(`Unknown access value: ${access}`);
      }
    }

    if (!_lodash.default.isEmpty(nonNativePerms)) {
      _logger.default.info(`The following permissions have not been recognized as native: ` + JSON.stringify(permissionsMapping, null, 2));

      await super.setPermissions(bundleId, nonNativePerms);
    }
  }

  async clearKeychains() {
    await this.simctl.resetKeychain();
  }

}

var _default = SimulatorXcode11_4;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zaW11bGF0b3IteGNvZGUtMTEuNC5qcyJdLCJuYW1lcyI6WyJOQVRJVkVfU0lNQ1RMX1BFUk1JU1NJT05TIiwiU2ltdWxhdG9yWGNvZGUxMV80IiwiU2ltdWxhdG9yWGNvZGUxMSIsImNvbnN0cnVjdG9yIiwidWRpZCIsInhjb2RlVmVyc2lvbiIsInNldEFwcGVhcmFuY2UiLCJ2YWx1ZSIsInNpbWN0bCIsIl8iLCJ0b0xvd2VyIiwiZ2V0QXBwZWFyYW5jZSIsImFkZENlcnRpZmljYXRlIiwicGF5bG9hZCIsIm9wdHMiLCJpc1Jvb3QiLCJtZXRob2ROYW1lIiwicmF3IiwicHVzaE5vdGlmaWNhdGlvbiIsInNldFBlcm1pc3Npb25zIiwiYnVuZGxlSWQiLCJwZXJtaXNzaW9uc01hcHBpbmciLCJsb2ciLCJkZWJ1ZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJub25OYXRpdmVQZXJtcyIsInBlcm1OYW1lIiwiYWNjZXNzIiwidG9QYWlycyIsImluY2x1ZGVzIiwiZ3JhbnRQZXJtaXNzaW9uIiwicmV2b2tlUGVybWlzc2lvbiIsInJlc2V0UGVybWlzc2lvbiIsIkVycm9yIiwiaXNFbXB0eSIsImluZm8iLCJjbGVhcktleWNoYWlucyIsInJlc2V0S2V5Y2hhaW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBR0EsTUFBTUEseUJBQXlCLEdBQUcsQ0FDaEMsS0FEZ0MsRUFFaEMsVUFGZ0MsRUFHaEMsa0JBSGdDLEVBSWhDLFVBSmdDLEVBS2hDLFVBTGdDLEVBTWhDLGlCQU5nQyxFQU9oQyxZQVBnQyxFQVFoQyxRQVJnQyxFQVNoQyxlQVRnQyxFQVVoQyxZQVZnQyxFQVdoQyxRQVhnQyxFQVloQyxXQVpnQyxFQWFoQyxNQWJnQyxDQUFsQzs7QUFpQkEsTUFBTUMsa0JBQU4sU0FBaUNDLHVCQUFqQyxDQUFrRDtBQUNoREMsRUFBQUEsV0FBVyxDQUFFQyxJQUFGLEVBQVFDLFlBQVIsRUFBc0I7QUFDL0IsVUFBTUQsSUFBTixFQUFZ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QU0sS0FBSzdCLE1BQUwsQ0FBWThCLGFBQVosRUFBTjtBQUNEOztBQXpKK0M7O2VBNEpuQ3JDLGtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IFNpbXVsYXRvclhjb2RlMTEgZnJvbSAnLi9zaW11bGF0b3IteGNvZGUtMTEnO1xuXG5cbmNvbnN0IE5BVElWRV9TSU1DVExfUEVSTUlTU0lPTlMgPSBbXG4gICdhbGwnLFxuICAnY2FsZW5kYXInLFxuICAnY29udGFjdHMtbGltaXRlZCcsXG4gICdjb250YWN0cycsXG4gICdsb2NhdGlvbicsXG4gICdsb2NhdGlvbi1hbHdheXMnLFxuICAncGhvdG9zLWFkZCcsXG4gICdwaG90b3MnLFxuICAnbWVkaWEtbGlicmFyeScsXG4gICdtaWNyb3Bob25lJyxcbiAgJ21vdGlvbicsXG4gICdyZW1pbmRlcnMnLFxuICAnc2lyaScsXG5dO1xuXG5cbmNsYXNzIFNpbXVsYXRvclhjb2RlMTFfNCBleHRlbmRzIFNpbXVsYXRvclhjb2RlMTEge1xuICBjb25zdHJ1Y3RvciAodWRpZCwgeGNvZGVWZXJzaW9uKSB7XG4gICAgc3VwZXIodWRpZCwgeGNvZGVWZXJzaW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogU2V0cyBVSSBhcHBlYXJhbmNlIHN0eWxlLlxuICAgKiBUaGlzIGZ1bmN0aW9uIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiBhIGJvb3RlZCBzaW11bGF0b3IuXG4gICAqXG4gICAqIEBzaW5jZSBYY29kZSBTREsgMTEuNFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgb25lIG9mIHBvc3NpYmxlIGFwcGVhcmFuY2UgdmFsdWVzOlxuICAgKiAtIGRhcms6IHRvIHN3aXRjaCB0byB0aGUgRGFyayBtb2RlXG4gICAqIC0gbGlnaHQ6IHRvIHN3aXRjaCB0byB0aGUgTGlnaHQgbW9kZVxuICAgKi9cbiAgYXN5bmMgc2V0QXBwZWFyYW5jZSAodmFsdWUpIHtcbiAgICBhd2FpdCB0aGlzLnNpbWN0bC5zZXRBcHBlYXJhbmNlKF8udG9Mb3dlcih2YWx1ZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiBHZXRzIHRoZSBjdXJyZW50IFVJIGFwcGVhcmFuY2Ugc3R5bGVcbiAgICogVGhpcyBmdW5jdGlvbiBjYW4gb25seSBiZSBjYWxsZWQgb24gYSBib290ZWQgc2ltdWxhdG9yLlxuICAgKlxuICAgKiBAc2luY2UgWGNvZGUgU0RLIDExLjRcbiAgICogQHJldHVybnMge3N0cmluZ30gdGhlIGN1cnJlbnQgVUkgYXBwZWFyYW5jZSBzdHlsZS5cbiAgICogUG9zc2libGUgdmFsdWVzIGFyZTpcbiAgICogLSBkYXJrOiB0byBzd2l0Y2ggdG8gdGhlIERhcmsgbW9kZVxuICAgKiAtIGxpZ2h0OiB0byBzd2l0Y2ggdG8gdGhlIExpZ2h0IG1vZGVcbiAgICovXG4gIGFzeW5jIGdldEFwcGVhcmFuY2UgKCkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnNpbWN0bC5nZXRBcHBlYXJhbmNlKCk7XG4gIH1cblxuICAvKipcbiAgICogQHR5cGVkZWYge09iamVjdH0gQ2VydGlmaWNhdGVPcHRpb25zXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaXNSb290IFt0cnVlXSAtIFdoZXRoZXIgdG8gaW5zdGFsbCB0aGUgZ2l2ZW5cbiAgICogY2VydGlmaWNhdGUgaW50byB0aGUgVHJ1c3RlZCBSb290IHN0b3JlIChgdHJ1ZWApIG9yIHRvIHRoZSBrZXljaGFpblxuICAgKiAoYGZhbHNlYClcbiAgICovXG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiBBZGRzIHRoZSBnaXZlbiBjZXJ0aWZpY2F0ZSB0byB0aGUgYm9vdGVkIHNpbXVsYXRvci5cbiAgICogVGhlIHNpbXVsYXRvciBjb3VsZCBiZSBpbiBib3RoIHJ1bm5pbmcgYW5kIHNodXRkb3duIHN0YXRlc1xuICAgKiBpbiBvcmRlciBmb3IgdGhpcyBtZXRob2QgdG8gcnVuIGFzIGV4cGVjdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF5bG9hZCB0aGUgY29udGVudCBvZiB0aGUgUEVNIGNlcnRpZmljYXRlXG4gICAqIEBwYXJhbSB7Q2VydGlmaWNhdGVPcHRpb25zfSBvcHRzXG4gICAqL1xuICBhc3luYyBhZGRDZXJ0aWZpY2F0ZSAocGF5bG9hZCwgb3B0cyA9IHt9KSB7XG4gICAgY29uc3Qge1xuICAgICAgaXNSb290ID0gdHJ1ZSxcbiAgICB9ID0gb3B0cztcbiAgICBjb25zdCBtZXRob2ROYW1lID0gaXNSb290ID8gJ2FkZFJvb3RDZXJ0aWZpY2F0ZScgOiAnYWRkQ2VydGlmaWNhdGUnO1xuICAgIGF3YWl0IHRoaXMuc2ltY3RsW21ldGhvZE5hbWVdKHBheWxvYWQsIHtyYXc6IHRydWV9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogU2ltdWxhdGVzIHB1c2ggbm90aWZpY2F0aW9uIGRlbGl2ZXJ5IHRvIHRoZSBib290ZWQgc2ltdWxhdG9yXG4gICAqXG4gICAqIEBzaW5jZSBYY29kZSBTREsgMTEuNFxuICAgKiBAcGFyYW0ge09iamVjdH0gcGF5bG9hZCAtIFRoZSBvYmplY3QgdGhhdCBkZXNjcmliZXMgQXBwbGUgcHVzaCBub3RpZmljYXRpb24gY29udGVudC5cbiAgICogSXQgbXVzdCBjb250YWluIGEgdG9wLWxldmVsIFwiU2ltdWxhdG9yIFRhcmdldCBCdW5kbGVcIiBrZXkgd2l0aCBhIHN0cmluZyB2YWx1ZSBtYXRjaGluZ1xuICAgKiB0aGUgdGFyZ2V0IGFwcGxpY2F0aW9u4oCYcyBidW5kbGUgaWRlbnRpZmllciBhbmQgXCJhcHNcIiBrZXkgd2l0aCB2YWxpZCBBcHBsZSBQdXNoIE5vdGlmaWNhdGlvbiB2YWx1ZXMuXG4gICAqIEZvciBleGFtcGxlOlxuICAgKiB7XG4gICAqICAgXCJTaW11bGF0b3IgVGFyZ2V0IEJ1bmRsZVwiOiBcImNvbS5hcHBsZS5QcmVmZXJlbmNlc1wiLFxuICAgKiAgIFwiYXBzXCI6IHtcbiAgICogICAgIFwiYWxlcnRcIjogXCJUaGlzIGlzIGEgc2ltdWxhdGVkIG5vdGlmaWNhdGlvbiFcIixcbiAgICogICAgIFwiYmFkZ2VcIjogMyxcbiAgICogICAgIFwic291bmRcIjogXCJkZWZhdWx0XCJcbiAgICogICB9XG4gICAqIH1cbiAgICovXG4gIGFzeW5jIHB1c2hOb3RpZmljYXRpb24gKHBheWxvYWQpIHtcbiAgICBhd2FpdCB0aGlzLnNpbWN0bC5wdXNoTm90aWZpY2F0aW9uKHBheWxvYWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiBTZXRzIHRoZSBwZXJtaXNzaW9ucyBmb3IgdGhlIHBhcnRpY3VsYXIgYXBwbGljYXRpb24gYnVuZGxlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYnVuZGxlSWQgLSBBcHBsaWNhdGlvbiBidW5kbGUgaWRlbnRpZmllci5cbiAgICogQHBhcmFtIHtPYmplY3R9IHBlcm1pc3Npb25zTWFwcGluZyAtIEEgbWFwcGluZyB3aGVyZSBrYXlzXG4gICAqIGFyZSBzZXJ2aWNlIG5hbWVzIGFuZCB2YWx1ZXMgYXJlIHRoZWlyIGNvcnJlc3BvbmRpbmcgc3RhdHVzIHZhbHVlcy5cbiAgICogVGhlIGZvbGxvd2luZyBrZXlzIGFyZSBzdXBwb3J0ZWQ6XG4gICAqIC0gYWxsOiBBcHBseSB0aGUgYWN0aW9uIHRvIGFsbCBzZXJ2aWNlcy5cbiAgICogLSBjYWxlbmRhcjogQWxsb3cgYWNjZXNzIHRvIGNhbGVuZGFyLlxuICAgKiAtIGNvbnRhY3RzLWxpbWl0ZWQ6IEFsbG93IGFjY2VzcyB0byBiYXNpYyBjb250YWN0IGluZm8uXG4gICAqIC0gY29udGFjdHM6IEFsbG93IGFjY2VzcyB0byBmdWxsIGNvbnRhY3QgZGV0YWlscy5cbiAgICogLSBsb2NhdGlvbjogQWxsb3cgYWNjZXNzIHRvIGxvY2F0aW9uIHNlcnZpY2VzIHdoZW4gYXBwIGlzIGluIHVzZS5cbiAgICogLSBsb2NhdGlvbi1hbHdheXM6IEFsbG93IGFjY2VzcyB0byBsb2NhdGlvbiBzZXJ2aWNlcyBhdCBhbGwgdGltZXMuXG4gICAqIC0gcGhvdG9zLWFkZDogQWxsb3cgYWRkaW5nIHBob3RvcyB0byB0aGUgcGhvdG8gbGlicmFyeS5cbiAgICogLSBwaG90b3M6IEFsbG93IGZ1bGwgYWNjZXNzIHRvIHRoZSBwaG90byBsaWJyYXJ5LlxuICAgKiAtIG1lZGlhLWxpYnJhcnk6IEFsbG93IGFjY2VzcyB0byB0aGUgbWVkaWEgbGlicmFyeS5cbiAgICogLSBtaWNyb3Bob25lOiBBbGxvdyBhY2Nlc3MgdG8gYXVkaW8gaW5wdXQuXG4gICAqIC0gbW90aW9uOiBBbGxvdyBhY2Nlc3MgdG8gbW90aW9uIGFuZCBmaXRuZXNzIGRhdGEuXG4gICAqIC0gcmVtaW5kZXJzOiBBbGxvdyBhY2Nlc3MgdG8gcmVtaW5kZXJzLlxuICAgKiAtIHNpcmk6IEFsbG93IHVzZSBvZiB0aGUgYXBwIHdpdGggU2lyaS5cbiAgICogVGhlIGZvbGxvd2luZyB2YWx1ZXMgYXJlIHN1cHBvcnRlZDpcbiAgICogLSB5ZXM6IFRvIGdyYW50IHRoZSBwZXJtaXNzaW9uXG4gICAqIC0gbm86IFRvIHJldm9rZSB0aGUgcGVybWlzc2lvblxuICAgKiAtIHVuc2V0OiBUbyByZXNldCB0aGUgcGVybWlzc2lvblxuICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgd2FzIGFuIGVycm9yIHdoaWxlIGNoYW5naW5nIHBlcm1pc3Npb25zLlxuICAgKi9cbiAgYXN5bmMgc2V0UGVybWlzc2lvbnMgKGJ1bmRsZUlkLCBwZXJtaXNzaW9uc01hcHBpbmcpIHtcbiAgICBsb2cuZGVidWcoYFNldHRpbmcgYWNjZXNzIGZvciAnJHtidW5kbGVJZH0nOiBgICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHBlcm1pc3Npb25zTWFwcGluZywgbnVsbCwgMikpO1xuICAgIGNvbnN0IG5vbk5hdGl2ZVBlcm1zID0ge307XG4gICAgZm9yIChsZXQgW3Blcm1OYW1lLCBhY2Nlc3NdIG9mIF8udG9QYWlycyhwZXJtaXNzaW9uc01hcHBpbmcpKSB7XG4gICAgICBpZiAoIU5BVElWRV9TSU1DVExfUEVSTUlTU0lPTlMuaW5jbHVkZXMocGVybU5hbWUpKSB7XG4gICAgICAgIG5vbk5hdGl2ZVBlcm1zW3Blcm1OYW1lXSA9IGFjY2VzcztcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGFjY2VzcyA9IF8udG9Mb3dlcihhY2Nlc3MpO1xuICAgICAgaWYgKHBlcm1OYW1lID09PSAnbWVkaWFsaWJyYXJ5Jykge1xuICAgICAgICBwZXJtTmFtZSA9ICdtZWRpYS1saWJyYXJ5JztcbiAgICAgIH0gZWxzZSBpZiAocGVybU5hbWUgPT09ICdsb2NhdGlvbicgJiYgYWNjZXNzID09PSAnYWx3YXlzJykge1xuICAgICAgICBwZXJtTmFtZSA9ICdsb2NhdGlvbi1hbHdheXMnO1xuICAgICAgfVxuICAgICAgc3dpdGNoIChhY2Nlc3MpIHtcbiAgICAgICAgY2FzZSAneWVzJzpcbiAgICAgICAgY2FzZSAnaW51c2UnOlxuICAgICAgICBjYXNlICdhbHdheXMnOlxuICAgICAgICAgIGF3YWl0IHRoaXMuc2ltY3RsLmdyYW50UGVybWlzc2lvbihidW5kbGVJZCwgcGVybU5hbWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdubyc6XG4gICAgICAgIGNhc2UgJ25ldmVyJzpcbiAgICAgICAgICBhd2FpdCB0aGlzLnNpbWN0bC5yZXZva2VQZXJtaXNzaW9uKGJ1bmRsZUlkLCBwZXJtTmFtZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3Vuc2V0JzpcbiAgICAgICAgICBhd2FpdCB0aGlzLnNpbWN0bC5yZXNldFBlcm1pc3Npb24oYnVuZGxlSWQsIHBlcm1OYW1lKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gYWNjZXNzIHZhbHVlOiAke2FjY2Vzc31gKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFfLmlzRW1wdHkobm9uTmF0aXZlUGVybXMpKSB7XG4gICAgICBsb2cuaW5mbyhgVGhlIGZvbGxvd2luZyBwZXJtaXNzaW9ucyBoYXZlIG5vdCBiZWVuIHJlY29nbml6ZWQgYXMgbmF0aXZlOiBgICtcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkocGVybWlzc2lvbnNNYXBwaW5nLCBudWxsLCAyKSk7XG4gICAgICBhd2FpdCBzdXBlci5zZXRQZXJtaXNzaW9ucyhidW5kbGVJZCwgbm9uTmF0aXZlUGVybXMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFzeW5jIGNsZWFyS2V5Y2hhaW5zICgpIHtcbiAgICBhd2FpdCB0aGlzLnNpbWN0bC5yZXNldEtleWNoYWluKCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2ltdWxhdG9yWGNvZGUxMV80O1xuIl0sImZpbGUiOiJsaWIvc2ltdWxhdG9yLXhjb2RlLTExLjQuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
