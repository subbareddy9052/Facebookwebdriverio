"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _2 = require("../..");

var _protocol = require("../../lib/protocol/protocol");

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _chai = _interopRequireDefault(require("chai"));

var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));

var _bluebird = _interopRequireDefault(require("bluebird"));

const should = _chai.default.should();

const DEFAULT_ARGS = {
  address: 'localhost',
  port: 8181
};

_chai.default.use(_chaiAsPromised.default);

function baseDriverE2ETests(DriverClass, defaultCaps = {}) {
  describe('BaseDriver (e2e)', function () {
    let baseServer,
        d = new DriverClass(DEFAULT_ARGS);
    before(async function () {
      baseServer = await (0, _2.server)({
        routeConfiguringFunction: (0, _2.routeConfiguringFunction)(d),
        port: DEFAULT_ARGS.port
      });
    });
    after(async function () {
      await baseServer.close();
    });

    function startSession(caps) {
      return (0, _requestPromise.default)({
        url: 'http://localhost:8181/wd/hub/session',
        method: 'POST',
        json: {
          desiredCapabilities: caps,
          requiredCapabilities: {}
        }
      });
    }

    function endSession(id) {
      return (0, _requestPromise.default)({
        url: `http://localhost:8181/wd/hub/session/${id}`,
        method: 'DELETE',
        json: true,
        simple: false
      });
    }

    function getSession(id) {
      return (0, _requestPromise.default)({
        url: `http://localhost:8181/wd/hub/session/${id}`,
        method: 'GET',
        json: true,
        simple: false
      });
    }

    describe('session handling', function () {
      it('should create session and retrieve a session id, then delete it', async function () {
        let res = await (0, _requestPromise.default)({
          url: 'http://localhost:8181/wd/hub/session',
          method: 'POST',
          json: {
            desiredCapabilities: defaultCaps,
            requiredCapabilities: {}
          },
          simple: false,
          resolveWithFullResponse: true
        });
        res.statusCode.should.equal(200);
        res.body.status.should.equal(0);
        should.exist(res.body.sessionId);
        res.body.value.should.eql(defaultCaps);
        res = await (0, _requestPromise.default)({
          url: `http://localhost:8181/wd/hub/session/${d.sessionId}`,
          method: 'DELETE',
          json: true,
          simple: false,
          resolveWithFullResponse: true
        });
        res.statusCode.should.equal(200);
        res.body.status.should.equal(0);
        should.equal(d.sessionId, null);
      });
    });
    it.skip('should throw NYI for commands not implemented', async function () {});
    describe('command timeouts', function () {
      let originalFindElement, originalFindElements;

      function startTimeoutSession(timeout) {
        let caps = _lodash.default.clone(defaultCaps);

        caps.newCommandTimeout = timeout;
        return startSession(caps);
      }

      before(function () {
        originalFindElement = d.findElement;

        d.findElement = function () {
          return 'foo';
        }.bind(d);

        originalFindElements = d.findElements;

        d.findElements = async function () {
          await _bluebird.default.delay(200);
          return ['foo'];
        }.bind(d);
      });
      after(function () {
        d.findElement = originalFindElement;
        d.findElements = originalFindElements;
      });
      it('should set a default commandTimeout', async function () {
        let newSession = await startTimeoutSession();
        d.newCommandTimeoutMs.should.be.above(0);
        await endSession(newSession.sessionId);
      });
      it('should timeout on commands using commandTimeout cap', async function () {
        let newSession = await startTimeoutSession(0.25);
        await (0, _requestPromise.default)({
          url: `http://localhost:8181/wd/hub/session/${d.sessionId}/element`,
          method: 'POST',
          json: {
            using: 'name',
            value: 'foo'
          }
        });
        await _bluebird.default.delay(400);
        let res = await (0, _requestPromise.default)({
          url: `http://localhost:8181/wd/hub/session/${d.sessionId}`,
          method: 'GET',
          json: true,
          simple: false
        });
        res.status.should.equal(6);
        should.equal(d.sessionId, null);
        res = await endSession(newSession.sessionId);
        res.status.should.equal(6);
      });
      it('should not timeout with commandTimeout of false', async function () {
        let newSession = await startTimeoutSession(0.1);
        let start = Date.now();
        let res = await (0, _requestPromise.default)({
          url: `http://localhost:8181/wd/hub/session/${d.sessionId}/elements`,
          method: 'POST',
          json: {
            using: 'name',
            value: 'foo'
          }
        });
        (Date.now() - start).should.be.above(150);
        res.value.should.eql(['foo']);
        await endSession(newSession.sessionId);
      });
      it('should not timeout with commandTimeout of 0', async function () {
        d.newCommandTimeoutMs = 2;
        let newSession = await startTimeoutSession(0);
        await (0, _requestPromise.default)({
          url: `http://localhost:8181/wd/hub/session/${d.sessionId}/element`,
          method: 'POST',
          json: {
            using: 'name',
            value: 'foo'
          }
        });
        await _bluebird.default.delay(400);
        let res = await (0, _requestPromise.default)({
          url: `http://localhost:8181/wd/hub/session/${d.sessionId}`,
          method: 'GET',
          json: true,
          simple: false
        });
        res.status.should.equal(0);
        res = await endSession(newSession.sessionId);
        res.status.should.equal(0);
        d.newCommandTimeoutMs = 60 * 1000;
      });
      it('should not timeout if its just the command taking awhile', async function () {
        let newSession = await startTimeoutSession(0.25);
        await (0, _requestPromise.default)({
          url: `http://localhost:8181/wd/hub/session/${d.sessionId}/element`,
          method: 'POST',
          json: {
            using: 'name',
            value: 'foo'
          }
        });
        await _bluebird.default.delay(400);
        let res = await (0, _requestPromise.default)({
          url: `http://localhost:8181/wd/hub/session/${d.sessionId}`,
          method: 'GET',
          json: true,
          simple: false
        });
        res.status.should.equal(6);
        should.equal(d.sessionId, null);
        res = await endSession(newSession.sessionId);
        res.status.should.equal(6);
      });
      it('should not have a timer running before or after a session', async function () {
        should.not.exist(d.noCommandTimer);
        let newSession = await startTimeoutSession(0.25);
        newSession.sessionId.should.equal(d.sessionId);
        should.exist(d.noCommandTimer);
        await endSession(newSession.sessionId);
        should.not.exist(d.noCommandTimer);
      });
    });
    describe('settings api', function () {
      before(function () {
        d.settings = new _2.DeviceSettings({
          ignoreUnimportantViews: false
        });
      });
      it('should be able to get settings object', function () {
        d.settings.getSettings().ignoreUnimportantViews.should.be.false;
      });
      it('should throw error when updateSettings method is not defined', async function () {
        await d.settings.update({
          ignoreUnimportantViews: true
        }).should.eventually.be.rejectedWith('onSettingsUpdate');
      });
      it('should throw error for invalid update object', async function () {
        await d.settings.update('invalid json').should.eventually.be.rejectedWith('JSON');
      });
    });
    describe('unexpected exits', function () {
      it('should reject a current command when the driver crashes', async function () {
        d._oldGetStatus = d.getStatus;

        d.getStatus = async function () {
          await _bluebird.default.delay(5000);
        }.bind(d);

        let p = (0, _requestPromise.default)({
          url: 'http://localhost:8181/wd/hub/status',
          method: 'GET',
          json: true,
          simple: false
        });
        await _bluebird.default.delay(100);
        const shutdownEventPromise = new _bluebird.default((resolve, reject) => {
          setTimeout(() => reject(new Error('onUnexpectedShutdown event is expected to be fired within 5 seconds timeout')), 5000);
          d.onUnexpectedShutdown(resolve);
        });
        d.startUnexpectedShutdown(new Error('Crashytimes'));
        let res = await p;
        res.status.should.equal(13);
        res.value.message.should.contain('Crashytimes');
        await shutdownEventPromise;
        d.getStatus = d._oldGetStatus;
      });
    });
    describe('event timings', function () {
      it('should not add timings if not using opt-in cap', async function () {
        let session = await startSession(defaultCaps);
        let res = await getSession(session.sessionId);
        should.not.exist(res.events);
        await endSession(session.sessionId);
      });
      it('should add start session timings', async function () {
        let caps = Object.assign({}, defaultCaps, {
          eventTimings: true
        });
        let session = await startSession(caps);
        let res = (await getSession(session.sessionId)).value;
        should.exist(res.events);
        should.exist(res.events.newSessionRequested);
        should.exist(res.events.newSessionStarted);
        res.events.newSessionRequested[0].should.be.a('number');
        res.events.newSessionStarted[0].should.be.a('number');
        await endSession(session.sessionId);
      });
    });
    describe('execute driver script', function () {
      let originalFindElement, sessionId;
      before(function () {
        d.allowInsecure = ['execute_driver_script'];
        originalFindElement = d.findElement;

        d.findElement = function (strategy, selector) {
          if (strategy === 'accessibility id' && selector === 'amazing') {
            return {
              [_protocol.W3C_ELEMENT_KEY]: 'element-id-1'
            };
          }

          throw new _2.errors.NoSuchElementError('not found');
        }.bind(d);
      });
      beforeEach(async function () {
        ({
          sessionId
        } = await startSession(defaultCaps));
      });
      after(function () {
        d.findElement = originalFindElement;
      });
      afterEach(async function () {
        await endSession(sessionId);
      });
      it('should not work unless the allowInsecure feature flag is set', async function () {
        d._allowInsecure = d.allowInsecure;
        d.allowInsecure = [];
        const script = `return 'foo'`;
        await (0, _requestPromise.default)({
          url: `http://localhost:8181/wd/hub/session/${sessionId}/appium/execute_driver`,
          method: 'POST',
          json: {
            script,
            type: 'wd'
          }
        }).should.eventually.be.rejectedWith(/allow-insecure/);
        await endSession(sessionId);
        d.allowInsecure = d._allowInsecure;
      });
      it('should execute a webdriverio script in the context of session', async function () {
        const script = `
          const timeouts = await driver.getTimeouts();
          const status = await driver.status();
          return [timeouts, status];
        `;
        const res = await (0, _requestPromise.default)({
          url: `http://localhost:8181/wd/hub/session/${sessionId}/appium/execute_driver`,
          method: 'POST',
          json: {
            script,
            type: 'webdriverio'
          }
        });
        const expectedTimeouts = {
          command: 250,
          implicit: 0
        };
        const expectedStatus = {};
        res.value.result.should.eql([expectedTimeouts, expectedStatus]);
      });
      it('should fail with any script type other than webdriverio currently', async function () {
        const script = `return 'foo'`;
        await (0, _requestPromise.default)({
          url: `http://localhost:8181/wd/hub/session/${sessionId}/appium/execute_driver`,
          method: 'POST',
          json: {
            script,
            type: 'wd'
          }
        }).should.eventually.be.rejectedWith(/script type/);
      });
      it('should execute a webdriverio script that returns elements correctly', async function () {
        const script = `
          return await driver.$("~amazing");
        `;
        const res = await (0, _requestPromise.default)({
          url: `http://localhost:8181/wd/hub/session/${sessionId}/appium/execute_driver`,
          method: 'POST',
          json: {
            script
          }
        });
        res.value.result.should.eql({
          [_protocol.W3C_ELEMENT_KEY]: 'element-id-1',
          [_protocol.MJSONWP_ELEMENT_KEY]: 'element-id-1'
        });
      });
      it('should execute a webdriverio script that returns elements in deep structure', async function () {
        const script = `
          const el = await driver.$("~amazing");
          return {element: el, elements: [el, el]};
        `;
        const res = await (0, _requestPromise.default)({
          url: `http://localhost:8181/wd/hub/session/${sessionId}/appium/execute_driver`,
          method: 'POST',
          json: {
            script
          }
        });
        const elObj = {
          [_protocol.W3C_ELEMENT_KEY]: 'element-id-1',
          [_protocol.MJSONWP_ELEMENT_KEY]: 'element-id-1'
        };
        res.value.result.should.eql({
          element: elObj,
          elements: [elObj, elObj]
        });
      });
      it('should store and return logs to the user', async function () {
        const script = `
          console.log("foo");
          console.log("foo2");
          console.warn("bar");
          console.error("baz");
          return null;
        `;
        const res = await (0, _requestPromise.default)({
          url: `http://localhost:8181/wd/hub/session/${sessionId}/appium/execute_driver`,
          method: 'POST',
          json: {
            script
          }
        });
        res.value.logs.should.eql({
          log: ['foo', 'foo2'],
          warn: ['bar'],
          error: ['baz']
        });
      });
      it('should have appium specific commands available', async function () {
        const script = `
          return typeof driver.lock;
        `;
        const res = await (0, _requestPromise.default)({
          url: `http://localhost:8181/wd/hub/session/${sessionId}/appium/execute_driver`,
          method: 'POST',
          json: {
            script
          }
        });
        res.value.result.should.eql('function');
      });
      it('should correctly handle errors that happen in a webdriverio script', async function () {
        const script = `
          return await driver.$("~notfound");
        `;
        const res = await (0, _requestPromise.default)({
          url: `http://localhost:8181/wd/hub/session/${sessionId}/appium/execute_driver`,
          method: 'POST',
          json: {
            script
          },
          simple: false
        });
        res.should.eql({
          sessionId,
          status: 13,
          value: {
            message: 'An unknown server-side error occurred while processing the command. Original error: Could not execute driver script. Original error was: Error: not found'
          }
        });
      });
      it('should correctly handle errors that happen when a script cannot be compiled', async function () {
        const script = `
          return {;
        `;
        const res = await (0, _requestPromise.default)({
          url: `http://localhost:8181/wd/hub/session/${sessionId}/appium/execute_driver`,
          method: 'POST',
          json: {
            script
          },
          simple: false
        });
        res.sessionId.should.eql(sessionId);
        res.status.should.eql(13);
        res.value.should.have.property('message');
        res.value.message.should.match(/An unknown server-side error occurred while processing the command. Original error: Could not execute driver script. Original error was: Error: Unexpected token '?;'?/);
      });
      it('should be able to set a timeout on a driver script', async function () {
        const script = `
          await Promise.delay(1000);
          return true;
        `;
        const res = await (0, _requestPromise.default)({
          url: `http://localhost:8181/wd/hub/session/${sessionId}/appium/execute_driver`,
          method: 'POST',
          json: {
            script,
            timeout: 50
          },
          simple: false
        });
        res.value.message.should.match(/.+50.+timeout.+/);
      });
    });
  });
}

var _default = baseDriverE2ETests;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvYmFzZWRyaXZlci9kcml2ZXItZTJlLXRlc3RzLmpzIl0sIm5hbWVzIjpbInNob3VsZCIsImNoYWkiLCJERUZBVUxUX0FSR1MiLCJhZGRyZXNzIiwicG9ydCIsInVzZSIsImNoYWlBc1Byb21pc2VkIiwiYmFzZURyaXZlckUyRVRlc3RzIiwiRHJpdmVyQ2xhc3MiLCJkZWZhdWx0Q2FwcyIsImRlc2NyaWJlIiwiYmFzZVNlcnZlciIsImQiLCJiZWZvcmUiLCJyb3V0ZUNvbmZpZ3VyaW5nRnVuY3Rpb24iLCJhZnRlciIsImNsb3NlIiwic3RhcnRTZXNzaW9uIiwiY2FwcyIsInVybCIsIm1ldGhvZCIsImpzb24iLCJkZXNpcmVkQ2FwYWJpbGl0aWVzIiwicmVxdWlyZWRDYXBhYmlsaXRpZXMiLCJlbmRTZXNzaW9uIiwiaWQiLCJzaW1wbGUiLCJnZXRTZXNzaW9uIiwiaXQiLCJyZXMiLCJyZXNvbHZlV2l0aEZ1bGxSZXNwb25zZSIsInN0YXR1c0NvZGUiLCJlcXVhbCIsImJvZHkiLCJzdGF0dXMiLCJleGlzdCIsInNlc3Npb25JZCIsInZhbHVlIiwiZXFsIiwic2tpcCIsIm9yaWdpbmFsRmluZEVsZW1lbnQiLCJvcmlnaW5hbEZpbmRFbGVtZW50cyIsInN0YXJ0VGltZW91dFNlc3Npb24iLCJ0aW1lb3V0IiwiXyIsImNsb25lIiwibmV3Q29tbWFuZFRpbWVvdXQiLCJmaW5kRWxlbWVudCIsImJpbmQiLCJmaW5kRWxlbWVudHMiLCJCIiwiZGVsYXkiLCJuZXdTZXNzaW9uIiwibmV3Q29tbWFuZFRpbWVvdXRNcyIsImJlIiwiYWJvdmUiLCJ1c2luZyIsInN0YXJ0IiwiRGF0ZSIsIm5vdyIsIm5vdCIsIm5vQ29tbWFuZFRpbWVyIiwic2V0dGluZ3MiLCJEZXZpY2VTZXR0aW5ncyIsImlnbm9yZVVuaW1wb3J0YW50Vmlld3MiLCJnZXRTZXR0aW5ncyIsImZhbHNlIiwidXBkYXRlIiwiZXZlbnR1YWxseSIsInJlamVjdGVkV2l0aCIsIl9vbGRHZXRTdGF0dXMiLCJnZXRTdGF0dXMiLCJwIiwic2h1dGRvd25FdmVudFByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwic2V0VGltZW91dCIsIkVycm9yIiwib25VbmV4cGVjdGVkU2h1dGRvd24iLCJzdGFydFVuZXhwZWN0ZWRTaHV0ZG93biIsIm1lc3NhZ2UiLCJjb250YWluIiwic2Vzc2lvbiIsImV2ZW50cyIsIk9iamVjdCIsImFzc2lnbiIsImV2ZW50VGltaW5ncyIsIm5ld1Nlc3Npb25SZXF1ZXN0ZWQiLCJuZXdTZXNzaW9uU3RhcnRlZCIsImEiLCJhbGxvd0luc2VjdXJlIiwic3RyYXRlZ3kiLCJzZWxlY3RvciIsIlczQ19FTEVNRU5UX0tFWSIsImVycm9ycyIsIk5vU3VjaEVsZW1lbnRFcnJvciIsImJlZm9yZUVhY2giLCJhZnRlckVhY2giLCJfYWxsb3dJbnNlY3VyZSIsInNjcmlwdCIsInR5cGUiLCJleHBlY3RlZFRpbWVvdXRzIiwiY29tbWFuZCIsImltcGxpY2l0IiwiZXhwZWN0ZWRTdGF0dXMiLCJyZXN1bHQiLCJNSlNPTldQX0VMRU1FTlRfS0VZIiwiZWxPYmoiLCJlbGVtZW50IiwiZWxlbWVudHMiLCJsb2dzIiwibG9nIiwid2FybiIsImVycm9yIiwiaGF2ZSIsInByb3BlcnR5IiwibWF0Y2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTUEsTUFBTSxHQUFHQyxjQUFLRCxNQUFMLEVBQWY7O0FBQ0EsTUFBTUUsWUFBWSxHQUFHO0FBQ25CQyxFQUFBQSxPQUFPLEVBQUUsV0FEVTtBQUVuQkMsRUFBQUEsSUFBSSxFQUFFO0FBRmEsQ0FBckI7O0FBSUFILGNBQUtJLEdBQUwsQ0FBU0MsdUJBQVQ7O0FBRUEsU0FBU0Msa0JBQVQsQ0FBNkJDLFdBQTdCLEVBQTBDQyxXQUFXLEdBQUcsRUFBeEQsRUFBNEQ7QUFDMURDLEVBQUFBLFFBQVEsQ0FBQyxrQkFBRCxFQUFxQixZQUFZO0FBQ3ZDLFFBQUlDLFVBQUo7QUFB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LGlCQUEvQjtBQUNELE9BWkMsQ0FBRjtBQWFELEtBNUtPLENBQVI7QUE2S0QsR0E1YU8sQ0FBUjtBQTZhRDs7ZUFFYzdHLGtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IHNlcnZlciwgcm91dGVDb25maWd1cmluZ0Z1bmN0aW9uLCBEZXZpY2VTZXR0aW5ncywgZXJyb3JzIH0gZnJvbSAnLi4vLi4nO1xuaW1wb3J0IHsgVzNDX0VMRU1FTlRfS0VZLCBNSlNPTldQX0VMRU1FTlRfS0VZIH0gZnJvbSAnLi4vLi4vbGliL3Byb3RvY29sL3Byb3RvY29sJztcbmltcG9ydCByZXF1ZXN0IGZyb20gJ3JlcXVlc3QtcHJvbWlzZSc7XG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcblxuY29uc3Qgc2hvdWxkID0gY2hhaS5zaG91bGQoKTtcbmNvbnN0IERFRkFVTFRfQVJHUyA9IHtcbiAgYWRkcmVzczogJ2xvY2FsaG9zdCcsXG4gIHBvcnQ6IDgxODFcbn07XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmZ1bmN0aW9uIGJhc2VEcml2ZXJFMkVUZXN0cyAoRHJpdmVyQ2xhc3MsIGRlZmF1bHRDYXBzID0ge30pIHtcbiAgZGVzY3JpYmUoJ0Jhc2VEcml2ZXIgKGUyZSknLCBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGJhc2VTZXJ2ZXIsIGQgPSBuZXcgRHJpdmVyQ2xhc3MoREVGQVVMVF9BUkdTKTtcbiAgICBiZWZvcmUoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgYmFzZVNlcnZlciA9IGF3YWl0IHNlcnZlcih7XG4gICAgICAgIHJvdXRlQ29uZmlndXJpbmdGdW5jdGlvbjogcm91dGVDb25maWd1cmluZ0Z1bmN0aW9uKGQpLFxuICAgICAgICBwb3J0OiBERUZBVUxUX0FSR1MucG9ydCxcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGFmdGVyKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGF3YWl0IGJhc2VTZXJ2ZXIuY2xvc2UoKTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHN0YXJ0U2Vzc2lvbiAoY2Fwcykge1xuICAgICAgcmV0dXJuIHJlcXVlc3Qoe1xuICAgICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3Nlc3Npb24nLFxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAganNvbjoge2Rlc2lyZWRDYXBhYmlsaXRpZXM6IGNhcHMsIHJlcXVpcmVkQ2FwYWJpbGl0aWVzOiB7fX0sXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbmRTZXNzaW9uIChpZCkge1xuICAgICAgcmV0dXJuIHJlcXVlc3Qoe1xuICAgICAgICB1cmw6IGBodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3Nlc3Npb24vJHtpZH1gLFxuICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICBzaW1wbGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXNzaW9uIChpZCkge1xuICAgICAgcmV0dXJuIHJlcXVlc3Qoe1xuICAgICAgICB1cmw6IGBodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3Nlc3Npb24vJHtpZH1gLFxuICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICBzaW1wbGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBkZXNjcmliZSgnc2Vzc2lvbiBoYW5kbGluZycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGl0KCdzaG91bGQgY3JlYXRlIHNlc3Npb24gYW5kIHJldHJpZXZlIGEgc2Vzc2lvbiBpZCwgdGhlbiBkZWxldGUgaXQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCByZXMgPSBhd2FpdCByZXF1ZXN0KHtcbiAgICAgICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3Nlc3Npb24nLFxuICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgIGpzb246IHtkZXNpcmVkQ2FwYWJpbGl0aWVzOiBkZWZhdWx0Q2FwcywgcmVxdWlyZWRDYXBhYmlsaXRpZXM6IHt9fSxcbiAgICAgICAgICBzaW1wbGU6IGZhbHNlLFxuICAgICAgICAgIHJlc29sdmVXaXRoRnVsbFJlc3BvbnNlOiB0cnVlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJlcy5zdGF0dXNDb2RlLnNob3VsZC5lcXVhbCgyMDApO1xuICAgICAgICByZXMuYm9keS5zdGF0dXMuc2hvdWxkLmVxdWFsKDApO1xuICAgICAgICBzaG91bGQuZXhpc3QocmVzLmJvZHkuc2Vzc2lvbklkKTtcbiAgICAgICAgcmVzLmJvZHkudmFsdWUuc2hvdWxkLmVxbChkZWZhdWx0Q2Fwcyk7XG5cbiAgICAgICAgcmVzID0gYXdhaXQgcmVxdWVzdCh7XG4gICAgICAgICAgdXJsOiBgaHR0cDovL2xvY2FsaG9zdDo4MTgxL3dkL2h1Yi9zZXNzaW9uLyR7ZC5zZXNzaW9uSWR9YCxcbiAgICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgc2ltcGxlOiBmYWxzZSxcbiAgICAgICAgICByZXNvbHZlV2l0aEZ1bGxSZXNwb25zZTogdHJ1ZVxuICAgICAgICB9KTtcblxuICAgICAgICByZXMuc3RhdHVzQ29kZS5zaG91bGQuZXF1YWwoMjAwKTtcbiAgICAgICAgcmVzLmJvZHkuc3RhdHVzLnNob3VsZC5lcXVhbCgwKTtcbiAgICAgICAgc2hvdWxkLmVxdWFsKGQuc2Vzc2lvbklkLCBudWxsKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQuc2tpcCgnc2hvdWxkIHRocm93IE5ZSSBmb3IgY29tbWFuZHMgbm90IGltcGxlbWVudGVkJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2NvbW1hbmQgdGltZW91dHMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgb3JpZ2luYWxGaW5kRWxlbWVudCwgb3JpZ2luYWxGaW5kRWxlbWVudHM7XG4gICAgICBmdW5jdGlvbiBzdGFydFRpbWVvdXRTZXNzaW9uICh0aW1lb3V0KSB7XG4gICAgICAgIGxldCBjYXBzID0gXy5jbG9uZShkZWZhdWx0Q2Fwcyk7XG4gICAgICAgIGNhcHMubmV3Q29tbWFuZFRpbWVvdXQgPSB0aW1lb3V0O1xuICAgICAgICByZXR1cm4gc3RhcnRTZXNzaW9uKGNhcHMpO1xuICAgICAgfVxuXG4gICAgICBiZWZvcmUoZnVuY3Rpb24gKCkge1xuICAgICAgICBvcmlnaW5hbEZpbmRFbGVtZW50ID0gZC5maW5kRWxlbWVudDtcbiAgICAgICAgZC5maW5kRWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gJ2Zvbyc7XG4gICAgICAgIH0uYmluZChkKTtcblxuICAgICAgICBvcmlnaW5hbEZpbmRFbGVtZW50cyA9IGQuZmluZEVsZW1lbnRzO1xuICAgICAgICBkLmZpbmRFbGVtZW50cyA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBhd2FpdCBCLmRlbGF5KDIwMCk7XG4gICAgICAgICAgcmV0dXJuIFsnZm9vJ107XG4gICAgICAgIH0uYmluZChkKTtcbiAgICAgIH0pO1xuXG4gICAgICBhZnRlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGQuZmluZEVsZW1lbnQgPSBvcmlnaW5hbEZpbmRFbGVtZW50O1xuICAgICAgICBkLmZpbmRFbGVtZW50cyA9IG9yaWdpbmFsRmluZEVsZW1lbnRzO1xuICAgICAgfSk7XG5cblxuICAgICAgaXQoJ3Nob3VsZCBzZXQgYSBkZWZhdWx0IGNvbW1hbmRUaW1lb3V0JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgbmV3U2Vzc2lvbiA9IGF3YWl0IHN0YXJ0VGltZW91dFNlc3Npb24oKTtcbiAgICAgICAgZC5uZXdDb21tYW5kVGltZW91dE1zLnNob3VsZC5iZS5hYm92ZSgwKTtcbiAgICAgICAgYXdhaXQgZW5kU2Vzc2lvbihuZXdTZXNzaW9uLnNlc3Npb25JZCk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCB0aW1lb3V0IG9uIGNvbW1hbmRzIHVzaW5nIGNvbW1hbmRUaW1lb3V0IGNhcCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IG5ld1Nlc3Npb24gPSBhd2FpdCBzdGFydFRpbWVvdXRTZXNzaW9uKDAuMjUpO1xuXG4gICAgICAgIGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICAgIHVybDogYGh0dHA6Ly9sb2NhbGhvc3Q6ODE4MS93ZC9odWIvc2Vzc2lvbi8ke2Quc2Vzc2lvbklkfS9lbGVtZW50YCxcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBqc29uOiB7dXNpbmc6ICduYW1lJywgdmFsdWU6ICdmb28nfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IEIuZGVsYXkoNDAwKTtcbiAgICAgICAgbGV0IHJlcyA9IGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICAgIHVybDogYGh0dHA6Ly9sb2NhbGhvc3Q6ODE4MS93ZC9odWIvc2Vzc2lvbi8ke2Quc2Vzc2lvbklkfWAsXG4gICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgIHNpbXBsZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIHJlcy5zdGF0dXMuc2hvdWxkLmVxdWFsKDYpO1xuICAgICAgICBzaG91bGQuZXF1YWwoZC5zZXNzaW9uSWQsIG51bGwpO1xuICAgICAgICByZXMgPSBhd2FpdCBlbmRTZXNzaW9uKG5ld1Nlc3Npb24uc2Vzc2lvbklkKTtcbiAgICAgICAgcmVzLnN0YXR1cy5zaG91bGQuZXF1YWwoNik7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBub3QgdGltZW91dCB3aXRoIGNvbW1hbmRUaW1lb3V0IG9mIGZhbHNlJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgbmV3U2Vzc2lvbiA9IGF3YWl0IHN0YXJ0VGltZW91dFNlc3Npb24oMC4xKTtcbiAgICAgICAgbGV0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgbGV0IHJlcyA9IGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICAgIHVybDogYGh0dHA6Ly9sb2NhbGhvc3Q6ODE4MS93ZC9odWIvc2Vzc2lvbi8ke2Quc2Vzc2lvbklkfS9lbGVtZW50c2AsXG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAganNvbjoge3VzaW5nOiAnbmFtZScsIHZhbHVlOiAnZm9vJ30sXG4gICAgICAgIH0pO1xuICAgICAgICAoRGF0ZS5ub3coKSAtIHN0YXJ0KS5zaG91bGQuYmUuYWJvdmUoMTUwKTtcbiAgICAgICAgcmVzLnZhbHVlLnNob3VsZC5lcWwoWydmb28nXSk7XG4gICAgICAgIGF3YWl0IGVuZFNlc3Npb24obmV3U2Vzc2lvbi5zZXNzaW9uSWQpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgbm90IHRpbWVvdXQgd2l0aCBjb21tYW5kVGltZW91dCBvZiAwJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBkLm5ld0NvbW1hbmRUaW1lb3V0TXMgPSAyO1xuICAgICAgICBsZXQgbmV3U2Vzc2lvbiA9IGF3YWl0IHN0YXJ0VGltZW91dFNlc3Npb24oMCk7XG5cbiAgICAgICAgYXdhaXQgcmVxdWVzdCh7XG4gICAgICAgICAgdXJsOiBgaHR0cDovL2xvY2FsaG9zdDo4MTgxL3dkL2h1Yi9zZXNzaW9uLyR7ZC5zZXNzaW9uSWR9L2VsZW1lbnRgLFxuICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgIGpzb246IHt1c2luZzogJ25hbWUnLCB2YWx1ZTogJ2Zvbyd9LFxuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgQi5kZWxheSg0MDApO1xuICAgICAgICBsZXQgcmVzID0gYXdhaXQgcmVxdWVzdCh7XG4gICAgICAgICAgdXJsOiBgaHR0cDovL2xvY2FsaG9zdDo4MTgxL3dkL2h1Yi9zZXNzaW9uLyR7ZC5zZXNzaW9uSWR9YCxcbiAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgIGpzb246IHRydWUsXG4gICAgICAgICAgc2ltcGxlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgcmVzLnN0YXR1cy5zaG91bGQuZXF1YWwoMCk7XG4gICAgICAgIHJlcyA9IGF3YWl0IGVuZFNlc3Npb24obmV3U2Vzc2lvbi5zZXNzaW9uSWQpO1xuICAgICAgICByZXMuc3RhdHVzLnNob3VsZC5lcXVhbCgwKTtcblxuICAgICAgICBkLm5ld0NvbW1hbmRUaW1lb3V0TXMgPSA2MCAqIDEwMDA7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBub3QgdGltZW91dCBpZiBpdHMganVzdCB0aGUgY29tbWFuZCB0YWtpbmcgYXdoaWxlJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgbmV3U2Vzc2lvbiA9IGF3YWl0IHN0YXJ0VGltZW91dFNlc3Npb24oMC4yNSk7XG4gICAgICAgIGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICAgIHVybDogYGh0dHA6Ly9sb2NhbGhvc3Q6ODE4MS93ZC9odWIvc2Vzc2lvbi8ke2Quc2Vzc2lvbklkfS9lbGVtZW50YCxcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBqc29uOiB7dXNpbmc6ICduYW1lJywgdmFsdWU6ICdmb28nfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IEIuZGVsYXkoNDAwKTtcbiAgICAgICAgbGV0IHJlcyA9IGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICAgIHVybDogYGh0dHA6Ly9sb2NhbGhvc3Q6ODE4MS93ZC9odWIvc2Vzc2lvbi8ke2Quc2Vzc2lvbklkfWAsXG4gICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgIHNpbXBsZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIHJlcy5zdGF0dXMuc2hvdWxkLmVxdWFsKDYpO1xuICAgICAgICBzaG91bGQuZXF1YWwoZC5zZXNzaW9uSWQsIG51bGwpO1xuICAgICAgICByZXMgPSBhd2FpdCBlbmRTZXNzaW9uKG5ld1Nlc3Npb24uc2Vzc2lvbklkKTtcbiAgICAgICAgcmVzLnN0YXR1cy5zaG91bGQuZXF1YWwoNik7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBub3QgaGF2ZSBhIHRpbWVyIHJ1bm5pbmcgYmVmb3JlIG9yIGFmdGVyIGEgc2Vzc2lvbicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2hvdWxkLm5vdC5leGlzdChkLm5vQ29tbWFuZFRpbWVyKTtcbiAgICAgICAgbGV0IG5ld1Nlc3Npb24gPSBhd2FpdCBzdGFydFRpbWVvdXRTZXNzaW9uKDAuMjUpO1xuICAgICAgICBuZXdTZXNzaW9uLnNlc3Npb25JZC5zaG91bGQuZXF1YWwoZC5zZXNzaW9uSWQpO1xuICAgICAgICBzaG91bGQuZXhpc3QoZC5ub0NvbW1hbmRUaW1lcik7XG4gICAgICAgIGF3YWl0IGVuZFNlc3Npb24obmV3U2Vzc2lvbi5zZXNzaW9uSWQpO1xuICAgICAgICBzaG91bGQubm90LmV4aXN0KGQubm9Db21tYW5kVGltZXIpO1xuICAgICAgfSk7XG5cbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdzZXR0aW5ncyBhcGknLCBmdW5jdGlvbiAoKSB7XG4gICAgICBiZWZvcmUoZnVuY3Rpb24gKCkge1xuICAgICAgICBkLnNldHRpbmdzID0gbmV3IERldmljZVNldHRpbmdzKHtpZ25vcmVVbmltcG9ydGFudFZpZXdzOiBmYWxzZX0pO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gZ2V0IHNldHRpbmdzIG9iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZC5zZXR0aW5ncy5nZXRTZXR0aW5ncygpLmlnbm9yZVVuaW1wb3J0YW50Vmlld3Muc2hvdWxkLmJlLmZhbHNlO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIHRocm93IGVycm9yIHdoZW4gdXBkYXRlU2V0dGluZ3MgbWV0aG9kIGlzIG5vdCBkZWZpbmVkJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBhd2FpdCBkLnNldHRpbmdzLnVwZGF0ZSh7aWdub3JlVW5pbXBvcnRhbnRWaWV3czogdHJ1ZX0pLnNob3VsZC5ldmVudHVhbGx5XG4gICAgICAgICAgICAgICAgLmJlLnJlamVjdGVkV2l0aCgnb25TZXR0aW5nc1VwZGF0ZScpO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIHRocm93IGVycm9yIGZvciBpbnZhbGlkIHVwZGF0ZSBvYmplY3QnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGF3YWl0IGQuc2V0dGluZ3MudXBkYXRlKCdpbnZhbGlkIGpzb24nKS5zaG91bGQuZXZlbnR1YWxseVxuICAgICAgICAgICAgICAgIC5iZS5yZWplY3RlZFdpdGgoJ0pTT04nKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3VuZXhwZWN0ZWQgZXhpdHMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpdCgnc2hvdWxkIHJlamVjdCBhIGN1cnJlbnQgY29tbWFuZCB3aGVuIHRoZSBkcml2ZXIgY3Jhc2hlcycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZC5fb2xkR2V0U3RhdHVzID0gZC5nZXRTdGF0dXM7XG4gICAgICAgIGQuZ2V0U3RhdHVzID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGF3YWl0IEIuZGVsYXkoNTAwMCk7XG4gICAgICAgIH0uYmluZChkKTtcbiAgICAgICAgbGV0IHAgPSByZXF1ZXN0KHtcbiAgICAgICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3N0YXR1cycsXG4gICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgIHNpbXBsZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIG1ha2Ugc3VyZSB0aGF0IHRoZSByZXF1ZXN0IGdldHMgdG8gdGhlIHNlcnZlciBiZWZvcmUgb3VyIHNodXRkb3duXG4gICAgICAgIGF3YWl0IEIuZGVsYXkoMTAwKTtcbiAgICAgICAgY29uc3Qgc2h1dGRvd25FdmVudFByb21pc2UgPSBuZXcgQigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiByZWplY3QobmV3IEVycm9yKCdvblVuZXhwZWN0ZWRTaHV0ZG93biBldmVudCBpcyBleHBlY3RlZCB0byBiZSBmaXJlZCB3aXRoaW4gNSBzZWNvbmRzIHRpbWVvdXQnKSksIDUwMDApO1xuICAgICAgICAgIGQub25VbmV4cGVjdGVkU2h1dGRvd24ocmVzb2x2ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBkLnN0YXJ0VW5leHBlY3RlZFNodXRkb3duKG5ldyBFcnJvcignQ3Jhc2h5dGltZXMnKSk7XG4gICAgICAgIGxldCByZXMgPSBhd2FpdCBwO1xuICAgICAgICByZXMuc3RhdHVzLnNob3VsZC5lcXVhbCgxMyk7XG4gICAgICAgIHJlcy52YWx1ZS5tZXNzYWdlLnNob3VsZC5jb250YWluKCdDcmFzaHl0aW1lcycpO1xuICAgICAgICBhd2FpdCBzaHV0ZG93bkV2ZW50UHJvbWlzZTtcbiAgICAgICAgZC5nZXRTdGF0dXMgPSBkLl9vbGRHZXRTdGF0dXM7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdldmVudCB0aW1pbmdzJywgZnVuY3Rpb24gKCkge1xuICAgICAgaXQoJ3Nob3VsZCBub3QgYWRkIHRpbWluZ3MgaWYgbm90IHVzaW5nIG9wdC1pbiBjYXAnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBzZXNzaW9uID0gYXdhaXQgc3RhcnRTZXNzaW9uKGRlZmF1bHRDYXBzKTtcbiAgICAgICAgbGV0IHJlcyA9IGF3YWl0IGdldFNlc3Npb24oc2Vzc2lvbi5zZXNzaW9uSWQpO1xuICAgICAgICBzaG91bGQubm90LmV4aXN0KHJlcy5ldmVudHMpO1xuICAgICAgICBhd2FpdCBlbmRTZXNzaW9uKHNlc3Npb24uc2Vzc2lvbklkKTtcbiAgICAgIH0pO1xuICAgICAgaXQoJ3Nob3VsZCBhZGQgc3RhcnQgc2Vzc2lvbiB0aW1pbmdzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgY2FwcyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRDYXBzLCB7ZXZlbnRUaW1pbmdzOiB0cnVlfSk7XG4gICAgICAgIGxldCBzZXNzaW9uID0gYXdhaXQgc3RhcnRTZXNzaW9uKGNhcHMpO1xuICAgICAgICBsZXQgcmVzID0gKGF3YWl0IGdldFNlc3Npb24oc2Vzc2lvbi5zZXNzaW9uSWQpKS52YWx1ZTtcbiAgICAgICAgc2hvdWxkLmV4aXN0KHJlcy5ldmVudHMpO1xuICAgICAgICBzaG91bGQuZXhpc3QocmVzLmV2ZW50cy5uZXdTZXNzaW9uUmVxdWVzdGVkKTtcbiAgICAgICAgc2hvdWxkLmV4aXN0KHJlcy5ldmVudHMubmV3U2Vzc2lvblN0YXJ0ZWQpO1xuICAgICAgICByZXMuZXZlbnRzLm5ld1Nlc3Npb25SZXF1ZXN0ZWRbMF0uc2hvdWxkLmJlLmEoJ251bWJlcicpO1xuICAgICAgICByZXMuZXZlbnRzLm5ld1Nlc3Npb25TdGFydGVkWzBdLnNob3VsZC5iZS5hKCdudW1iZXInKTtcbiAgICAgICAgYXdhaXQgZW5kU2Vzc2lvbihzZXNzaW9uLnNlc3Npb25JZCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdleGVjdXRlIGRyaXZlciBzY3JpcHQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBtb2NrIHNvbWUgbWV0aG9kcyBvbiBCYXNlRHJpdmVyIHRoYXQgYXJlbid0IG5vcm1hbGx5IHRoZXJlIGV4Y2VwdCBpblxuICAgICAgLy8gYSBmdWxseSBibG93biBkcml2ZXJcbiAgICAgIGxldCBvcmlnaW5hbEZpbmRFbGVtZW50LCBzZXNzaW9uSWQ7XG4gICAgICBiZWZvcmUoZnVuY3Rpb24gKCkge1xuICAgICAgICBkLmFsbG93SW5zZWN1cmUgPSBbJ2V4ZWN1dGVfZHJpdmVyX3NjcmlwdCddO1xuICAgICAgICBvcmlnaW5hbEZpbmRFbGVtZW50ID0gZC5maW5kRWxlbWVudDtcbiAgICAgICAgZC5maW5kRWxlbWVudCA9IChmdW5jdGlvbiAoc3RyYXRlZ3ksIHNlbGVjdG9yKSB7XG4gICAgICAgICAgaWYgKHN0cmF0ZWd5ID09PSAnYWNjZXNzaWJpbGl0eSBpZCcgJiYgc2VsZWN0b3IgPT09ICdhbWF6aW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIHtbVzNDX0VMRU1FTlRfS0VZXTogJ2VsZW1lbnQtaWQtMSd9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRocm93IG5ldyBlcnJvcnMuTm9TdWNoRWxlbWVudEVycm9yKCdub3QgZm91bmQnKTtcbiAgICAgICAgfSkuYmluZChkKTtcbiAgICAgIH0pO1xuXG4gICAgICBiZWZvcmVFYWNoKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgKHtzZXNzaW9uSWR9ID0gYXdhaXQgc3RhcnRTZXNzaW9uKGRlZmF1bHRDYXBzKSk7XG4gICAgICB9KTtcblxuICAgICAgYWZ0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICBkLmZpbmRFbGVtZW50ID0gb3JpZ2luYWxGaW5kRWxlbWVudDtcbiAgICAgIH0pO1xuXG4gICAgICBhZnRlckVhY2goYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBhd2FpdCBlbmRTZXNzaW9uKHNlc3Npb25JZCk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBub3Qgd29yayB1bmxlc3MgdGhlIGFsbG93SW5zZWN1cmUgZmVhdHVyZSBmbGFnIGlzIHNldCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZC5fYWxsb3dJbnNlY3VyZSA9IGQuYWxsb3dJbnNlY3VyZTtcbiAgICAgICAgZC5hbGxvd0luc2VjdXJlID0gW107XG4gICAgICAgIGNvbnN0IHNjcmlwdCA9IGByZXR1cm4gJ2ZvbydgO1xuICAgICAgICBhd2FpdCByZXF1ZXN0KHtcbiAgICAgICAgICB1cmw6IGBodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3Nlc3Npb24vJHtzZXNzaW9uSWR9L2FwcGl1bS9leGVjdXRlX2RyaXZlcmAsXG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAganNvbjoge3NjcmlwdCwgdHlwZTogJ3dkJ30sXG4gICAgICAgIH0pLnNob3VsZC5ldmVudHVhbGx5LmJlLnJlamVjdGVkV2l0aCgvYWxsb3ctaW5zZWN1cmUvKTtcbiAgICAgICAgYXdhaXQgZW5kU2Vzc2lvbihzZXNzaW9uSWQpO1xuICAgICAgICBkLmFsbG93SW5zZWN1cmUgPSBkLl9hbGxvd0luc2VjdXJlO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBhIHdlYmRyaXZlcmlvIHNjcmlwdCBpbiB0aGUgY29udGV4dCBvZiBzZXNzaW9uJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBzY3JpcHQgPSBgXG4gICAgICAgICAgY29uc3QgdGltZW91dHMgPSBhd2FpdCBkcml2ZXIuZ2V0VGltZW91dHMoKTtcbiAgICAgICAgICBjb25zdCBzdGF0dXMgPSBhd2FpdCBkcml2ZXIuc3RhdHVzKCk7XG4gICAgICAgICAgcmV0dXJuIFt0aW1lb3V0cywgc3RhdHVzXTtcbiAgICAgICAgYDtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgcmVxdWVzdCh7XG4gICAgICAgICAgdXJsOiBgaHR0cDovL2xvY2FsaG9zdDo4MTgxL3dkL2h1Yi9zZXNzaW9uLyR7c2Vzc2lvbklkfS9hcHBpdW0vZXhlY3V0ZV9kcml2ZXJgLFxuICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgIGpzb246IHtzY3JpcHQsIHR5cGU6ICd3ZWJkcml2ZXJpbyd9LFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgZXhwZWN0ZWRUaW1lb3V0cyA9IHtjb21tYW5kOiAyNTAsIGltcGxpY2l0OiAwfTtcbiAgICAgICAgY29uc3QgZXhwZWN0ZWRTdGF0dXMgPSB7fTtcbiAgICAgICAgcmVzLnZhbHVlLnJlc3VsdC5zaG91bGQuZXFsKFtleHBlY3RlZFRpbWVvdXRzLCBleHBlY3RlZFN0YXR1c10pO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgZmFpbCB3aXRoIGFueSBzY3JpcHQgdHlwZSBvdGhlciB0aGFuIHdlYmRyaXZlcmlvIGN1cnJlbnRseScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3Qgc2NyaXB0ID0gYHJldHVybiAnZm9vJ2A7XG4gICAgICAgIGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICAgIHVybDogYGh0dHA6Ly9sb2NhbGhvc3Q6ODE4MS93ZC9odWIvc2Vzc2lvbi8ke3Nlc3Npb25JZH0vYXBwaXVtL2V4ZWN1dGVfZHJpdmVyYCxcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBqc29uOiB7c2NyaXB0LCB0eXBlOiAnd2QnfSxcbiAgICAgICAgfSkuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWRXaXRoKC9zY3JpcHQgdHlwZS8pO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBhIHdlYmRyaXZlcmlvIHNjcmlwdCB0aGF0IHJldHVybnMgZWxlbWVudHMgY29ycmVjdGx5JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBzY3JpcHQgPSBgXG4gICAgICAgICAgcmV0dXJuIGF3YWl0IGRyaXZlci4kKFwifmFtYXppbmdcIik7XG4gICAgICAgIGA7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICAgIHVybDogYGh0dHA6Ly9sb2NhbGhvc3Q6ODE4MS93ZC9odWIvc2Vzc2lvbi8ke3Nlc3Npb25JZH0vYXBwaXVtL2V4ZWN1dGVfZHJpdmVyYCxcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBqc29uOiB7c2NyaXB0fSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJlcy52YWx1ZS5yZXN1bHQuc2hvdWxkLmVxbCh7XG4gICAgICAgICAgW1czQ19FTEVNRU5UX0tFWV06ICdlbGVtZW50LWlkLTEnLFxuICAgICAgICAgIFtNSlNPTldQX0VMRU1FTlRfS0VZXTogJ2VsZW1lbnQtaWQtMSdcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBleGVjdXRlIGEgd2ViZHJpdmVyaW8gc2NyaXB0IHRoYXQgcmV0dXJucyBlbGVtZW50cyBpbiBkZWVwIHN0cnVjdHVyZScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3Qgc2NyaXB0ID0gYFxuICAgICAgICAgIGNvbnN0IGVsID0gYXdhaXQgZHJpdmVyLiQoXCJ+YW1hemluZ1wiKTtcbiAgICAgICAgICByZXR1cm4ge2VsZW1lbnQ6IGVsLCBlbGVtZW50czogW2VsLCBlbF19O1xuICAgICAgICBgO1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0KHtcbiAgICAgICAgICB1cmw6IGBodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3Nlc3Npb24vJHtzZXNzaW9uSWR9L2FwcGl1bS9leGVjdXRlX2RyaXZlcmAsXG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAganNvbjoge3NjcmlwdH0sXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBlbE9iaiA9IHtcbiAgICAgICAgICBbVzNDX0VMRU1FTlRfS0VZXTogJ2VsZW1lbnQtaWQtMScsXG4gICAgICAgICAgW01KU09OV1BfRUxFTUVOVF9LRVldOiAnZWxlbWVudC1pZC0xJ1xuICAgICAgICB9O1xuICAgICAgICByZXMudmFsdWUucmVzdWx0LnNob3VsZC5lcWwoe2VsZW1lbnQ6IGVsT2JqLCBlbGVtZW50czogW2VsT2JqLCBlbE9ial19KTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIHN0b3JlIGFuZCByZXR1cm4gbG9ncyB0byB0aGUgdXNlcicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3Qgc2NyaXB0ID0gYFxuICAgICAgICAgIGNvbnNvbGUubG9nKFwiZm9vXCIpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiZm9vMlwiKTtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJiYXJcIik7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcImJhelwiKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgYDtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgcmVxdWVzdCh7XG4gICAgICAgICAgdXJsOiBgaHR0cDovL2xvY2FsaG9zdDo4MTgxL3dkL2h1Yi9zZXNzaW9uLyR7c2Vzc2lvbklkfS9hcHBpdW0vZXhlY3V0ZV9kcml2ZXJgLFxuICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgIGpzb246IHtzY3JpcHR9LFxuICAgICAgICB9KTtcbiAgICAgICAgcmVzLnZhbHVlLmxvZ3Muc2hvdWxkLmVxbCh7bG9nOiBbJ2ZvbycsICdmb28yJ10sIHdhcm46IFsnYmFyJ10sIGVycm9yOiBbJ2JheiddfSk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBoYXZlIGFwcGl1bSBzcGVjaWZpYyBjb21tYW5kcyBhdmFpbGFibGUnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IHNjcmlwdCA9IGBcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIGRyaXZlci5sb2NrO1xuICAgICAgICBgO1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0KHtcbiAgICAgICAgICB1cmw6IGBodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3Nlc3Npb24vJHtzZXNzaW9uSWR9L2FwcGl1bS9leGVjdXRlX2RyaXZlcmAsXG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAganNvbjoge3NjcmlwdH0sXG4gICAgICAgIH0pO1xuICAgICAgICByZXMudmFsdWUucmVzdWx0LnNob3VsZC5lcWwoJ2Z1bmN0aW9uJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBjb3JyZWN0bHkgaGFuZGxlIGVycm9ycyB0aGF0IGhhcHBlbiBpbiBhIHdlYmRyaXZlcmlvIHNjcmlwdCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3Qgc2NyaXB0ID0gYFxuICAgICAgICAgIHJldHVybiBhd2FpdCBkcml2ZXIuJChcIn5ub3Rmb3VuZFwiKTtcbiAgICAgICAgYDtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgcmVxdWVzdCh7XG4gICAgICAgICAgdXJsOiBgaHR0cDovL2xvY2FsaG9zdDo4MTgxL3dkL2h1Yi9zZXNzaW9uLyR7c2Vzc2lvbklkfS9hcHBpdW0vZXhlY3V0ZV9kcml2ZXJgLFxuICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgIGpzb246IHtzY3JpcHR9LFxuICAgICAgICAgIHNpbXBsZTogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgICAgICByZXMuc2hvdWxkLmVxbCh7XG4gICAgICAgICAgc2Vzc2lvbklkLFxuICAgICAgICAgIHN0YXR1czogMTMsXG4gICAgICAgICAgdmFsdWU6IHttZXNzYWdlOiAnQW4gdW5rbm93biBzZXJ2ZXItc2lkZSBlcnJvciBvY2N1cnJlZCB3aGlsZSBwcm9jZXNzaW5nIHRoZSBjb21tYW5kLiBPcmlnaW5hbCBlcnJvcjogQ291bGQgbm90IGV4ZWN1dGUgZHJpdmVyIHNjcmlwdC4gT3JpZ2luYWwgZXJyb3Igd2FzOiBFcnJvcjogbm90IGZvdW5kJ31cbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBjb3JyZWN0bHkgaGFuZGxlIGVycm9ycyB0aGF0IGhhcHBlbiB3aGVuIGEgc2NyaXB0IGNhbm5vdCBiZSBjb21waWxlZCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3Qgc2NyaXB0ID0gYFxuICAgICAgICAgIHJldHVybiB7O1xuICAgICAgICBgO1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0KHtcbiAgICAgICAgICB1cmw6IGBodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3Nlc3Npb24vJHtzZXNzaW9uSWR9L2FwcGl1bS9leGVjdXRlX2RyaXZlcmAsXG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAganNvbjoge3NjcmlwdH0sXG4gICAgICAgICAgc2ltcGxlOiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJlcy5zZXNzaW9uSWQuc2hvdWxkLmVxbChzZXNzaW9uSWQpO1xuICAgICAgICByZXMuc3RhdHVzLnNob3VsZC5lcWwoMTMpO1xuICAgICAgICByZXMudmFsdWUuc2hvdWxkLmhhdmUucHJvcGVydHkoJ21lc3NhZ2UnKTtcbiAgICAgICAgcmVzLnZhbHVlLm1lc3NhZ2Uuc2hvdWxkLm1hdGNoKC9BbiB1bmtub3duIHNlcnZlci1zaWRlIGVycm9yIG9jY3VycmVkIHdoaWxlIHByb2Nlc3NpbmcgdGhlIGNvbW1hbmQuIE9yaWdpbmFsIGVycm9yOiBDb3VsZCBub3QgZXhlY3V0ZSBkcml2ZXIgc2NyaXB0LiBPcmlnaW5hbCBlcnJvciB3YXM6IEVycm9yOiBVbmV4cGVjdGVkIHRva2VuICc/Oyc/Lyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBhYmxlIHRvIHNldCBhIHRpbWVvdXQgb24gYSBkcml2ZXIgc2NyaXB0JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBzY3JpcHQgPSBgXG4gICAgICAgICAgYXdhaXQgUHJvbWlzZS5kZWxheSgxMDAwKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgYDtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgcmVxdWVzdCh7XG4gICAgICAgICAgdXJsOiBgaHR0cDovL2xvY2FsaG9zdDo4MTgxL3dkL2h1Yi9zZXNzaW9uLyR7c2Vzc2lvbklkfS9hcHBpdW0vZXhlY3V0ZV9kcml2ZXJgLFxuICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgIGpzb246IHtzY3JpcHQsIHRpbWVvdXQ6IDUwfSxcbiAgICAgICAgICBzaW1wbGU6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICAgICAgcmVzLnZhbHVlLm1lc3NhZ2Uuc2hvdWxkLm1hdGNoKC8uKzUwLit0aW1lb3V0LisvKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZURyaXZlckUyRVRlc3RzO1xuIl0sImZpbGUiOiJ0ZXN0L2Jhc2Vkcml2ZXIvZHJpdmVyLWUyZS10ZXN0cy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
