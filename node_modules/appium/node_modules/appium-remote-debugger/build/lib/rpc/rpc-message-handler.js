"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _events = _interopRequireDefault(require("events"));

class RpcMessageHandler extends _events.default {
  constructor(isTargetBased = false) {
    super();
    this.isTargetBased = isTargetBased;
  }

  get isTargetBased() {
    return this._isTargetBased;
  }

  set isTargetBased(isTargetBased) {
    this._isTargetBased = !!isTargetBased;
  }

  async handleMessage(plist) {
    const selector = plist.__selector;

    if (!selector) {
      _logger.default.debug('Got an invalid plist');

      return;
    }

    const argument = plist.__argument;

    switch (selector) {
      case '_rpc_reportSetup:':
        this.emit('_rpc_reportSetup:', null, argument.WIRSimulatorNameKey, argument.WIRSimulatorBuildKey, argument.WIRSimulatorProductVersionKey);
        break;

      case '_rpc_reportConnectedApplicationList:':
        this.emit('_rpc_reportConnectedApplicationList:', null, argument.WIRApplicationDictionaryKey);
        break;

      case '_rpc_applicationSentListing:':
        this.emit('_rpc_forwardGetListing:', null, argument.WIRApplicationIdentifierKey, argument.WIRListingKey);
        break;

      case '_rpc_applicationConnected:':
        this.emit('_rpc_applicationConnected:', null, argument);
        break;

      case '_rpc_applicationDisconnected:':
        this.emit('_rpc_applicationDisconnected:', null, argument);
        break;

      case '_rpc_applicationUpdated:':
        this.emit('_rpc_applicationUpdated:', null, argument);
        break;

      case '_rpc_reportConnectedDriverList:':
        this.emit('_rpc_reportConnectedDriverList:', null, argument);
        break;

      case '_rpc_applicationSentData:':
        await this.handleDataMessage(plist);
        break;

      default:
        _logger.default.debug(`Debugger got a message for '${selector}' and have no ` + `handler, doing nothing.`);

    }
  }

  parseDataKey(plist) {
    try {
      return JSON.parse(plist.__argument.WIRMessageDataKey.toString('utf8'));
    } catch (err) {
      _logger.default.error(`Unparseable message data: ${_lodash.default.truncate(JSON.stringify(plist), {
        length: 100
      })}`);

      throw new Error(`Unable to parse message data: ${err.message}`);
    }
  }

  async dispatchDataMessage(msgId, method, params, result, error) {
    if (!_lodash.default.isEmpty(msgId)) {
      _logger.default.debug(`Handling message (id: '${msgId}')`);
    }

    if (msgId) {
      if (this.listenerCount(msgId)) {
        var _result;

        if (_lodash.default.has((_result = result) === null || _result === void 0 ? void 0 : _result.result, 'value')) {
          result = result.result.value;
        }

        this.emit(msgId, error, result);
      } else {
        _logger.default.error(`Web Inspector returned data for message '${msgId}' ` + `but we were not waiting for that message! ` + `result: '${JSON.stringify(result)}'; ` + `error: '${JSON.stringify(error)}'`);
      }

      return;
    }

    let eventNames = [method];
    let args = [params];

    switch (method) {
      case 'Page.frameStoppedLoading':
        eventNames.push('Page.frameNavigated');

      case 'Page.frameNavigated':
        args = [`'${method}' event`];
        break;

      case 'Timeline.eventRecorded':
        args = [params || params.record];
        break;

      case 'Console.messageAdded':
        args = [params.message];
        break;

      case 'Runtime.executionContextCreated':
        args = [params.context];
        break;

      default:
        break;
    }

    if (_lodash.default.startsWith(method, 'Network.')) {
      eventNames.push('NetworkEvent');
      args.push(method);
    }

    if (_lodash.default.startsWith(method, 'Console.')) {
      eventNames.push('ConsoleEvent');
      args.push(method);
    }

    for (const name of eventNames) {
      this.emit(name, error, ...args);
    }
  }

  async handleDataMessage(plist) {
    var _result2;

    const dataKey = this.parseDataKey(plist);
    let msgId = (dataKey.id || '').toString();
    let result = dataKey.result;
    let method = dataKey.method;
    let params;

    if (method === 'Target.targetCreated') {
      const app = plist.__argument.WIRApplicationIdentifierKey;
      const targetInfo = dataKey.params.targetInfo;
      this.emit('Target.targetCreated', null, app, targetInfo);
      return;
    } else if (method === 'Target.didCommitProvisionalTarget') {
      const app = plist.__argument.WIRApplicationIdentifierKey;
      const oldTargetId = dataKey.params.oldTargetId;
      const newTargetId = dataKey.params.newTargetId;
      this.emit('Target.didCommitProvisionalTarget', null, app, oldTargetId, newTargetId);
      return;
    } else if (method === 'Target.targetDestroyed') {
      const app = plist.__argument.WIRApplicationIdentifierKey;
      const targetInfo = dataKey.params.targetInfo || {
        targetId: dataKey.params.targetId
      };
      this.emit('Target.targetDestroyed', null, app, targetInfo);
      return;
    }

    if (!dataKey.error && this.isTargetBased) {
      if (dataKey.method !== 'Target.dispatchMessageFromTarget') {
        return;
      }

      let message;

      try {
        message = JSON.parse(dataKey.params.message);
        msgId = message.id;
        method = message.method;
        result = message.result || message;
        params = result.params;
      } catch (err) {
        _logger.default.error(`Unexpected message format from Web Inspector:`);

        this.warn(_appiumSupport.util.jsonStringify(plist));
        throw err;
      }
    } else {
      params = dataKey.params;
    }

    let error = dataKey.error || null;

    if ((_result2 = result) === null || _result2 === void 0 ? void 0 : _result2.wasThrown) {
      var _result3, _result3$result, _result4, _result4$result, _result5, _result5$result, _result6, _result6$result;

      const message = ((_result3 = result) === null || _result3 === void 0 ? void 0 : (_result3$result = _result3.result) === null || _result3$result === void 0 ? void 0 : _result3$result.value) || ((_result4 = result) === null || _result4 === void 0 ? void 0 : (_result4$result = _result4.result) === null || _result4$result === void 0 ? void 0 : _result4$result.description) ? ((_result5 = result) === null || _result5 === void 0 ? void 0 : (_result5$result = _result5.result) === null || _result5$result === void 0 ? void 0 : _result5$result.value) || ((_result6 = result) === null || _result6 === void 0 ? void 0 : (_result6$result = _result6.result) === null || _result6$result === void 0 ? void 0 : _result6$result.description) : 'Error occurred in handling data message';
      error = new Error(message);
    }

    await this.dispatchDataMessage(msgId, method, params, result, error);
  }

}

exports.default = RpcMessageHandler;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
