"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

var _rpcClient = _interopRequireDefault(require("./rpc-client"));

var _appiumIosDevice = require("appium-ios-device");

class RpcClientRealDevice extends _rpcClient.default {
  constructor(opts = {}) {
    super(Object.assign({
      shouldCheckForTarget: false
    }, opts));
    const {
      udid
    } = opts;
    this.udid = udid;
  }

  async connect() {
    this.service = await _appiumIosDevice.services.startWebInspectorService(this.udid, {
      osVersion: this.platformVersion,
      isSimulator: false,
      verbose: this.logAllCommunication,
      verboseHexDump: this.logAllCommunicationHexDump,
      socketChunkSize: this.socketChunkSize
    });
    this.service.listenMessage(this.receive.bind(this));
    this.isConnected = true;
  }

  async disconnect() {
    if (!this.isConnected) {
      return;
    }

    _logger.default.debug('Disconnecting from remote debugger');

    await super.disconnect();
    this.service.close();
    this.isConnected = false;
  }

  async sendMessage(cmd) {
    this.service.sendMessage(cmd);
  }

  async receive(data) {
    if (!this.isConnected) {
      return;
    }

    await this.messageHandler.handleMessage(data);
  }

}

exports.default = RpcClientRealDevice;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9ycGMvcnBjLWNsaWVudC1yZWFsLWRldmljZS5qcyJdLCJuYW1lcyI6WyJScGNDbGllbnRSZWFsRGV2aWNlIiwiUnBjQ2xpZW50IiwiY29uc3RydWN0b3IiLCJvcHRzIiwiT2JqZWN0IiwiYXNzaWduIiwic2hvdWxkQ2hlY2tGb3JUYXJnZXQiLCJ1ZGlkIiwiY29ubmVjdCIsInNlcnZpY2UiLCJzZXJ2aWNlcyIsInN0YXJ0V2ViSW5zcGVjdG9yU2VydmljZSIsIm9zVmVyc2lvbiIsInBsYXRmb3JtVmVyc2lvbiIsImlzU2ltdWxhdG9yIiwidmVyYm9zZSIsImxvZ0FsbENvbW11bmljYXRpb24iLCJ2ZXJib3NlSGV4RHVtcCIsImxvZ0FsbENvbW11bmljYXRpb25IZXhEdW1wIiwic29ja2V0Q2h1bmtTaXplIiwibGlzdGVuTWVzc2FnZSIsInJlY2VpdmUiLCJiaW5kIiwiaXNDb25uZWN0ZWQiLCJkaXNjb25uZWN0IiwibG9nIiwiZGVidWciLCJjbG9zZSIsInNlbmRNZXNzYWdlIiwiY21kIiwiZGF0YSIsIm1lc3NhZ2VIYW5kbGVyIiwiaGFuZGxlTWVzc2FnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFHZSxNQUFNQSxtQkFBTixTQUFrQ0Msa0JBQWxDLENBQTRDO0FBQ3pEQyxFQUFBQSxXQUFXLENBQUVDLElBQUksR0FBRyxFQUFULEVBQWE7QUFDdEIsVUFBTUMsTUFBTSxDQUFDQyxNQUFQLENBQWM7QUFDbEJDLE1BQUFBLG9CQUFvQixFQUFFO0FBREosS0FBZCxFQUVISCxJQUZHLENBQU47QUFJQSxVQUFNO0FBQ0pJLE1BQUFBO0FBREksUUFFRkosSUFGSjtBQUlBLFNBQUtJLElBQUwsR0FBWUEsSUFBWjtBQUNEOztBQUVELFFBQU1DLE9BQU4sR0FBaUI7QUFDZixTQUFLQyxPQUFMLEdBQWUsTUFBTUMsMEJBQVNDLHdCQUFULENBQWtDLEtBQUtKLElBQXZDLEVBQTZDO0FBQ2hFSyxNQUFBQSxTQUFTLEVBQUUsS0FBS0MsZUFEZ0Q7QUFFaEVDLE1BQUFBLFdBQVcsRUFBRSxLQUZtRDtBQUdoRUMsTUFBQUEsT0FBTyxFQUFFLEtBQUtDLG1CQUhrRDtBQUloRUMsTUFBQUEsY0FBYyxFQUFFLEtBQUtDLDBCQUoyQztBQUtoRUMsTUFBQUEsZUFBZSxFQUFFLEtBQUtBO0FBTDBDLEtBQTdDLENBQXJCO0FBUUEsU0FBS1YsT0FBTCxDQUFhVyxhQUFiLENBQTJCLEtBQUtDLE9BQUwsQ0FBYUMsSUFBYixDQUFrQixJQUFsQixDQUEzQjtBQUNBLFNBQUtDLFdBQUwsR0FBbUIsSUFBbkI7QUFDRDs7QUFFRCxRQUFNQyxVQUFOLEdBQW9CO0FBQ2xCLFFBQUksQ0FBQyxLQUFLRCxXQUFWLEVBQXVCO0FBQ3JCO0FBQ0Q7O0FBRURFLG9CQUFJQyxLQUFKLENBQVUsb0NBQVY7O0FBQ0EsVUFBTSxNQUFNRixVQUFOLEVBQU47QUFDQSxTQUFLZixPQUFMLENBQWFrQixLQUFiO0FBQ0EsU0FBS0osV0FBTCxHQUFtQixLQUFuQjtBQUNEOztBQUVELFFBQU1LLFdBQU4sQ0FBbUJDLEdBQW5CLEVBQXdCO0FBQ3RCLFNBQUtwQixPQUFMLENBQWFtQixXQUFiLENBQXlCQyxHQUF6QjtBQUNEOztBQUVELFFBQU1SLE9BQU4sQ0FBZVMsSUFBZixFQUFxQjtBQUNuQixRQUFJLENBQUMsS0FBS1AsV0FBVixFQUF1QjtBQUNyQjtBQUNEOztBQUNELFVBQU0sS0FBS1EsY0FBTCxDQUFvQkMsYUFBcEIsQ0FBa0NGLElBQWxDLENBQU47QUFDRDs7QUE5Q3dEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IFJwY0NsaWVudCBmcm9tICcuL3JwYy1jbGllbnQnO1xuaW1wb3J0IHsgc2VydmljZXMgfSBmcm9tICdhcHBpdW0taW9zLWRldmljZSc7XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUnBjQ2xpZW50UmVhbERldmljZSBleHRlbmRzIFJwY0NsaWVudCB7XG4gIGNvbnN0cnVjdG9yIChvcHRzID0ge30pIHtcbiAgICBzdXBlcihPYmplY3QuYXNzaWduKHtcbiAgICAgIHNob3VsZENoZWNrRm9yVGFyZ2V0OiBmYWxzZSxcbiAgICB9LCBvcHRzKSk7XG5cbiAgICBjb25zdCB7XG4gICAgICB1ZGlkLFxuICAgIH0gPSBvcHRzO1xuXG4gICAgdGhpcy51ZGlkID0gdWRpZDtcbiAgfVxuXG4gIGFzeW5jIGNvbm5lY3QgKCkge1xuICAgIHRoaXMuc2VydmljZSA9IGF3YWl0IHNlcnZpY2VzLnN0YXJ0V2ViSW5zcGVjdG9yU2VydmljZSh0aGlzLnVkaWQsIHtcbiAgICAgIG9zVmVyc2lvbjogdGhpcy5wbGF0Zm9ybVZlcnNpb24sXG4gICAgICBpc1NpbXVsYXRvcjogZmFsc2UsXG4gICAgICB2ZXJib3NlOiB0aGlzLmxvZ0FsbENvbW11bmljYXRpb24sXG4gICAgICB2ZXJib3NlSGV4RHVtcDogdGhpcy5sb2dBbGxDb21tdW5pY2F0aW9uSGV4RHVtcCxcbiAgICAgIHNvY2tldENodW5rU2l6ZTogdGhpcy5zb2NrZXRDaHVua1NpemUsXG4gICAgfSk7XG5cbiAgICB0aGlzLnNlcnZpY2UubGlzdGVuTWVzc2FnZSh0aGlzLnJlY2VpdmUuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5pc0Nvbm5lY3RlZCA9IHRydWU7XG4gIH1cblxuICBhc3luYyBkaXNjb25uZWN0ICgpIHtcbiAgICBpZiAoIXRoaXMuaXNDb25uZWN0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsb2cuZGVidWcoJ0Rpc2Nvbm5lY3RpbmcgZnJvbSByZW1vdGUgZGVidWdnZXInKTtcbiAgICBhd2FpdCBzdXBlci5kaXNjb25uZWN0KCk7XG4gICAgdGhpcy5zZXJ2aWNlLmNsb3NlKCk7XG4gICAgdGhpcy5pc0Nvbm5lY3RlZCA9IGZhbHNlO1xuICB9XG5cbiAgYXN5bmMgc2VuZE1lc3NhZ2UgKGNtZCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgICB0aGlzLnNlcnZpY2Uuc2VuZE1lc3NhZ2UoY21kKTtcbiAgfVxuXG4gIGFzeW5jIHJlY2VpdmUgKGRhdGEpIHtcbiAgICBpZiAoIXRoaXMuaXNDb25uZWN0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5tZXNzYWdlSGFuZGxlci5oYW5kbGVNZXNzYWdlKGRhdGEpO1xuICB9XG59XG4iXSwiZmlsZSI6ImxpYi9ycGMvcnBjLWNsaWVudC1yZWFsLWRldmljZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
