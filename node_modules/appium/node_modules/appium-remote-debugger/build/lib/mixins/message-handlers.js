"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

var _events = _interopRequireDefault(require("./events"));

var _utils = require("../utils");

var _lodash = _interopRequireDefault(require("lodash"));

async function onPageChange(err, appIdKey, pageDict) {
  if (_lodash.default.isEmpty(pageDict)) {
    return;
  }

  const pageArray = (0, _utils.pageArrayFromDict)(pageDict);
  await this.useAppDictLock(done => {
    try {
      if (this.appDict[appIdKey]) {
        if (this.appDict[appIdKey].pageArray) {
          if (this.appDict[appIdKey].pageArray.resolve) {
            this.appDict[appIdKey].pageArray.resolve();
          } else {
            if (_lodash.default.isEqual(this.appDict[appIdKey].pageArray, pageArray)) {
              _logger.default.debug(`Received page change notice for app '${appIdKey}' ` + `but the listing has not changed. Ignoring.`);

              return done();
            }
          }
        }

        this.appDict[appIdKey].pageArray = pageArray;
      }
    } finally {
      done();
    }
  });

  if (this._navigatingToPage) {
    return;
  }

  _logger.default.debug(`Page changed: ${(0, _utils.simpleStringify)(pageDict, true)}`);

  this.emit(_events.default.EVENT_PAGE_CHANGE, {
    appIdKey: appIdKey.replace('PID:', ''),
    pageArray
  });
}

async function onAppConnect(err, dict) {
  const appIdKey = dict.WIRApplicationIdentifierKey;

  _logger.default.debug(`Notified that new application '${appIdKey}' has connected`);

  await this.useAppDictLock(done => {
    try {
      this.updateAppsWithDict(dict);
    } finally {
      done();
    }
  });
}

function onAppDisconnect(err, dict) {
  const appIdKey = dict.WIRApplicationIdentifierKey;

  _logger.default.debug(`Application '${appIdKey}' disconnected. Removing from app dictionary.`);

  _logger.default.debug(`Current app is '${this.appIdKey}'`);

  delete this.appDict[appIdKey];

  if (this.appIdKey === appIdKey) {
    _logger.default.debug(`No longer have app id. Attempting to find new one.`);

    this.appIdKey = (0, _utils.getDebuggerAppKey)(this.bundleId, this.appDict);
  }

  if (!this.appDict) {
    _logger.default.debug('Main app disconnected. Disconnecting altogether.');

    this.connected = false;
    this.emit(_events.default.EVENT_DISCONNECT, true);
  }
}

async function onAppUpdate(err, dict) {
  await this.useAppDictLock(done => {
    try {
      this.updateAppsWithDict(dict);
    } finally {
      done();
    }
  });
}

function onConnectedDriverList(err, drivers) {
  this.connectedDrivers = drivers.WIRDriverDictionaryKey;

  _logger.default.debug(`Received connected driver list: ${JSON.stringify(this.connectedDrivers)}`);
}

async function onConnectedApplicationList(err, apps) {
  _logger.default.debug(`Received connected applications list: ${_lodash.default.keys(apps).join(', ')}`);

  let newDict = {};

  for (const dict of _lodash.default.values(apps)) {
    const [id, entry] = (0, _utils.appInfoFromDict)(dict);

    if (this.skippedApps.includes(entry.name)) {
      continue;
    }

    newDict[id] = entry;
  }

  await this.useAppDictLock(done => {
    try {
      _lodash.default.defaults(this.appDict, newDict);
    } finally {
      done();
    }
  });
}

const messageHandlers = {
  onPageChange,
  onAppConnect,
  onAppDisconnect,
  onAppUpdate,
  onConnectedDriverList,
  onConnectedApplicationList
};
var _default = messageHandlers;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9taXhpbnMvbWVzc2FnZS1oYW5kbGVycy5qcyJdLCJuYW1lcyI6WyJvblBhZ2VDaGFuZ2UiLCJlcnIiLCJhcHBJZEtleSIsInBhZ2VEaWN0IiwiXyIsImlzRW1wdHkiLCJwYWdlQXJyYXkiLCJ1c2VBcHBEaWN0TG9jayIsImRvbmUiLCJhcHBEaWN0IiwicmVzb2x2ZSIsImlzRXF1YWwiLCJsb2ciLCJkZWJ1ZyIsIl9uYXZpZ2F0aW5nVG9QYWdlIiwiZW1pdCIsImV2ZW50cyIsIkVWRU5UX1BBR0VfQ0hBTkdFIiwicmVwbGFjZSIsIm9uQXBwQ29ubmVjdCIsImRpY3QiLCJXSVJBcHBsaWNhdGlvbklkZW50aWZpZXJLZXkiLCJ1cGRhdGVBcHBzV2l0aERpY3QiLCJvbkFwcERpc2Nvbm5lY3QiLCJidW5kbGVJZCIsImNvbm5lY3RlZCIsIkVWRU5UX0RJU0NPTk5FQ1QiLCJvbkFwcFVwZGF0ZSIsIm9uQ29ubmVjdGVkRHJpdmVyTGlzdCIsImRyaXZlcnMiLCJjb25uZWN0ZWREcml2ZXJzIiwiV0lSRHJpdmVyRGljdGlvbmFyeUtleSIsIkpTT04iLCJzdHJpbmdpZnkiLCJvbkNvbm5lY3RlZEFwcGxpY2F0aW9uTGlzdCIsImFwcHMiLCJrZXlzIiwiam9pbiIsIm5ld0RpY3QiLCJ2YWx1ZXMiLCJpZCIsImVudHJ5Iiwic2tpcHBlZEFwcHMiLCJpbmNsdWRlcyIsIm5hbWUiLCJkZWZhdWx0cyIsIm1lc3NhZ2VIYW5kbGVycyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFRQSxlQUFlQSxZQUFmLENBQTZCQyxHQUE3QixFQUFrQ0MsUUFBbEMsRUFBNENDLFFBQTVDLEVBQXNEO0FBQ3BELE1BQUlDLGdCQUFFQyxPQUFGLENBQVVGLFFBQVYsQ0FBSixFQUF5QjtBQUN2QjtBQUNEOztBQUVELFFBQU1HLFNBQVMsR0FBRyw4QkFBa0JILFFBQWxCLENBQWxCO0FBRUEsUUFBTSxLQUFLSSxjQUFMLENBQXFCQyxJQUFELElB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cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IGV2ZW50cyBmcm9tICcuL2V2ZW50cyc7XG5pbXBvcnQgeyBwYWdlQXJyYXlGcm9tRGljdCwgZ2V0RGVidWdnZXJBcHBLZXksIHNpbXBsZVN0cmluZ2lmeSwgYXBwSW5mb0Zyb21EaWN0IH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuXG4vKlxuICogR2VuZXJpYyBjYWxsYmFja3MgdXNlZCB0aHJvdWdob3V0IHRoZSBsaWZlY3ljbGUgb2YgdGhlIFJlbW90ZSBEZWJ1Z2dlci5cbiAqIFRoZXNlIHdpbGwgYmUgYWRkZWQgdG8gdGhlIHByb3RvdHlwZS5cbiAqL1xuXG5hc3luYyBmdW5jdGlvbiBvblBhZ2VDaGFuZ2UgKGVyciwgYXBwSWRLZXksIHBhZ2VEaWN0KSB7XG4gIGlmIChfLmlzRW1wdHkocGFnZURpY3QpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgcGFnZUFycmF5ID0gcGFnZUFycmF5RnJvbURpY3QocGFnZURpY3QpO1xuXG4gIGF3YWl0IHRoaXMudXNlQXBwRGljdExvY2soKGRvbmUpID0+IHtcbiAgICB0cnkge1xuICAgICAgLy8gc2F2ZSB0aGUgcGFnZSBkaWN0IGZvciB0aGlzIGFwcFxuICAgICAgaWYgKHRoaXMuYXBwRGljdFthcHBJZEtleV0pIHtcbiAgICAgICAgaWYgKHRoaXMuYXBwRGljdFthcHBJZEtleV0ucGFnZUFycmF5KSB7XG4gICAgICAgICAgaWYgKHRoaXMuYXBwRGljdFthcHBJZEtleV0ucGFnZUFycmF5LnJlc29sdmUpIHtcbiAgICAgICAgICAgIC8vIHBhZ2VEaWN0IGlzIGEgcGVuZGluZyBwcm9taXNlLCBzbyByZXNvbHZlXG4gICAgICAgICAgICB0aGlzLmFwcERpY3RbYXBwSWRLZXldLnBhZ2VBcnJheS5yZXNvbHZlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHdlIGhhdmUgYSBwcmUtZXhpc3RpbmcgcGFnZURpY3RcbiAgICAgICAgICAgIGlmIChfLmlzRXF1YWwodGhpcy5hcHBEaWN0W2FwcElkS2V5XS5wYWdlQXJyYXksIHBhZ2VBcnJheSkpIHtcbiAgICAgICAgICAgICAgbG9nLmRlYnVnKGBSZWNlaXZlZCBwYWdlIGNoYW5nZSBub3RpY2UgZm9yIGFwcCAnJHthcHBJZEtleX0nIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYGJ1dCB0aGUgbGlzdGluZyBoYXMgbm90IGNoYW5nZWQuIElnbm9yaW5nLmApO1xuICAgICAgICAgICAgICByZXR1cm4gZG9uZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBrZWVwIHRyYWNrIG9mIHRoZSBwYWdlIGRpY3Rpb25hcnlcbiAgICAgICAgdGhpcy5hcHBEaWN0W2FwcElkS2V5XS5wYWdlQXJyYXkgPSBwYWdlQXJyYXk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGRvbmUoKTtcbiAgICB9XG4gIH0pO1xuXG4gIGlmICh0aGlzLl9uYXZpZ2F0aW5nVG9QYWdlKSB7XG4gICAgLy8gaW4gdGhlIG1pZGRsZSBvZiBuYXZpZ2F0aW5nLCBzbyByZXBvcnRpbmcgYSBwYWdlIGNoYW5nZSB3aWxsIGNhdXNlIHByb2JsZW1zXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbG9nLmRlYnVnKGBQYWdlIGNoYW5nZWQ6ICR7c2ltcGxlU3RyaW5naWZ5KHBhZ2VEaWN0LCB0cnVlKX1gKTtcblxuICB0aGlzLmVtaXQoZXZlbnRzLkVWRU5UX1BBR0VfQ0hBTkdFLCB7XG4gICAgYXBwSWRLZXk6IGFwcElkS2V5LnJlcGxhY2UoJ1BJRDonLCAnJyksXG4gICAgcGFnZUFycmF5LFxuICB9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gb25BcHBDb25uZWN0IChlcnIsIGRpY3QpIHtcbiAgY29uc3QgYXBwSWRLZXkgPSBkaWN0LldJUkFwcGxpY2F0aW9uSWRlbnRpZmllcktleTtcbiAgbG9nLmRlYnVnKGBOb3RpZmllZCB0aGF0IG5ldyBhcHBsaWNhdGlvbiAnJHthcHBJZEtleX0nIGhhcyBjb25uZWN0ZWRgKTtcbiAgYXdhaXQgdGhpcy51c2VBcHBEaWN0TG9jaygoZG9uZSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLnVwZGF0ZUFwcHNXaXRoRGljdChkaWN0KTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgZG9uZSgpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uQXBwRGlzY29ubmVjdCAoZXJyLCBkaWN0KSB7XG4gIGNvbnN0IGFwcElkS2V5ID0gZGljdC5XSVJBcHBsaWNhdGlvbklkZW50aWZpZXJLZXk7XG4gIGxvZy5kZWJ1ZyhgQXBwbGljYXRpb24gJyR7YXBwSWRLZXl9JyBkaXNjb25uZWN0ZWQuIFJlbW92aW5nIGZyb20gYXBwIGRpY3Rpb25hcnkuYCk7XG4gIGxvZy5kZWJ1ZyhgQ3VycmVudCBhcHAgaXMgJyR7dGhpcy5hcHBJZEtleX0nYCk7XG5cbiAgLy8gZ2V0IHJpZCBvZiB0aGUgZW50cnkgaW4gb3VyIGFwcCBkaWN0aW9uYXJ5LFxuICAvLyBzaW5jZSBpdCBpcyBubyBsb25nZXIgYXZhaWxhYmxlXG4gIGRlbGV0ZSB0aGlzLmFwcERpY3RbYXBwSWRLZXldO1xuXG4gIC8vIGlmIHRoZSBkaXNjb25uZWN0ZWQgYXBwIGlzIHRoZSBvbmUgd2UgYXJlIGNvbm5lY3RlZCB0bywgdHJ5IHRvIGZpbmQgYW5vdGhlclxuICBpZiAodGhpcy5hcHBJZEtleSA9PT0gYXBwSWRLZXkpIHtcbiAgICBsb2cuZGVidWcoYE5vIGxvbmdlciBoYXZlIGFwcCBpZC4gQXR0ZW1wdGluZyB0byBmaW5kIG5ldyBvbmUuYCk7XG4gICAgdGhpcy5hcHBJZEtleSA9IGdldERlYnVnZ2VyQXBwS2V5KHRoaXMuYnVuZGxlSWQsIHRoaXMuYXBwRGljdCk7XG4gIH1cblxuICBpZiAoIXRoaXMuYXBwRGljdCkge1xuICAgIC8vIHRoaXMgbWVhbnMgd2Ugbm8gbG9uZ2VyIGhhdmUgYW55IGFwcHMuIHdoYXQgdGhlIHdoYXQ/XG4gICAgbG9nLmRlYnVnKCdNYWluIGFwcCBkaXNjb25uZWN0ZWQuIERpc2Nvbm5lY3RpbmcgYWx0b2dldGhlci4nKTtcbiAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdChldmVudHMuRVZFTlRfRElTQ09OTkVDVCwgdHJ1ZSk7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gb25BcHBVcGRhdGUgKGVyciwgZGljdCkge1xuICBhd2FpdCB0aGlzLnVzZUFwcERpY3RMb2NrKChkb25lKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMudXBkYXRlQXBwc1dpdGhEaWN0KGRpY3QpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBkb25lKCk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gb25Db25uZWN0ZWREcml2ZXJMaXN0IChlcnIsIGRyaXZlcnMpIHtcbiAgdGhpcy5jb25uZWN0ZWREcml2ZXJzID0gZHJpdmVycy5XSVJEcml2ZXJEaWN0aW9uYXJ5S2V5O1xuICBsb2cuZGVidWcoYFJlY2VpdmVkIGNvbm5lY3RlZCBkcml2ZXIgbGlzdDogJHtKU09OLnN0cmluZ2lmeSh0aGlzLmNvbm5lY3RlZERyaXZlcnMpfWApO1xufVxuXG5hc3luYyBmdW5jdGlvbiBvbkNvbm5lY3RlZEFwcGxpY2F0aW9uTGlzdCAoZXJyLCBhcHBzKSB7XG4gIGxvZy5kZWJ1ZyhgUmVjZWl2ZWQgY29ubmVjdGVkIGFwcGxpY2F0aW9ucyBsaXN0OiAke18ua2V5cyhhcHBzKS5qb2luKCcsICcpfWApO1xuXG4gIC8vIHRyYW5zbGF0ZSB0aGUgcmVjZWl2ZWQgaW5mb3JtYXRpb24gaW50byBhbiBlYXNpZXItdG8tbWFuYWdlXG4gIC8vIGhhc2ggd2l0aCBhcHAgaWQgYXMga2V5LCBhbmQgYXBwIGluZm8gYXMgdmFsdWVcbiAgbGV0IG5ld0RpY3QgPSB7fTtcbiAgZm9yIChjb25zdCBkaWN0IG9mIF8udmFsdWVzKGFwcHMpKSB7XG4gICAgY29uc3QgW2lkLCBlbnRyeV0gPSBhcHBJbmZvRnJvbURpY3QoZGljdCk7XG4gICAgaWYgKHRoaXMuc2tpcHBlZEFwcHMuaW5jbHVkZXMoZW50cnkubmFtZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBuZXdEaWN0W2lkXSA9IGVudHJ5O1xuICB9XG4gIC8vIHVwZGF0ZSB0aGUgb2JqZWN0J3MgbGlzdCBvZiBhcHBzXG4gIGF3YWl0IHRoaXMudXNlQXBwRGljdExvY2soKGRvbmUpID0+IHtcbiAgICB0cnkge1xuICAgICAgXy5kZWZhdWx0cyh0aGlzLmFwcERpY3QsIG5ld0RpY3QpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBkb25lKCk7XG4gICAgfVxuICB9KTtcbn1cblxuY29uc3QgbWVzc2FnZUhhbmRsZXJzID0ge1xuICBvblBhZ2VDaGFuZ2UsXG4gIG9uQXBwQ29ubmVjdCxcbiAgb25BcHBEaXNjb25uZWN0LFxuICBvbkFwcFVwZGF0ZSxcbiAgb25Db25uZWN0ZWREcml2ZXJMaXN0LFxuICBvbkNvbm5lY3RlZEFwcGxpY2F0aW9uTGlzdCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1lc3NhZ2VIYW5kbGVycztcbiJdLCJmaWxlIjoibGliL21peGlucy9tZXNzYWdlLWhhbmRsZXJzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
