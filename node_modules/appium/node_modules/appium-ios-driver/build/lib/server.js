"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startServer = startServer;
exports.startHttpsServer = startHttpsServer;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _appiumBaseDriver = require("appium-base-driver");

var _driver = require("./driver");

var _https = _interopRequireDefault(require("https"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _url = _interopRequireDefault(require("url"));

var _portfinder = _interopRequireDefault(require("portfinder"));

const pem = _bluebird.default.promisifyAll(require('pem'));

async function startServer(port, host) {
  let driver = new _driver.IosDriver();
  let routeConfiguringFunction = (0, _appiumBaseDriver.routeConfiguringFunction)(driver);
  let server = await (0, _appiumBaseDriver.server)({
    routeConfiguringFunction,
    port,
    hostname: host
  });

  _logger.default.info(`IosDriver server listening on http://${host}:${port}`);

  return server;
}

async function startHttpsServer(port, host) {
  let privateKey = await pem.createPrivateKeyAsync();
  let keys = await pem.createCertificateAsync({
    days: 1,
    selfSigned: true,
    serviceKey: privateKey.key
  });
  let pemCertificate = keys.certificate;
  let httpsPort = await _portfinder.default.getPortPromise();
  const serverOpts = {
    key: keys.serviceKey,
    cert: pemCertificate
  };

  let sslServer = _https.default.createServer(serverOpts, function requestReceived(req, res) {
    _logger.default.debug(`Received HTTPS '${req.method}' request for '${req.url}'`);

    if (req.method === 'OPTIONS') {
      res.setHeader('Access-Control-Allow-Origin', '*');
      res.setHeader('Access-Control-Allow-Methods', 'POST, GET, OPTIONS');
      res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
      res.writeHead(200);
      res.end();
    } else if (req.method === 'POST') {
      let body = '';
      req.on('data', function onData(data) {
        body += data;
      });
      req.on('end', async function onEnd() {
        let httpsUrl = _url.default.parse(req.url);

        let uri = `http://${host}:${port}${httpsUrl.pathname}`;

        _logger.default.debug(`Passing '${body}' to '${uri}'`);

        let options = {
          method: 'POST',
          uri,
          body
        };
        await (0, _requestPromise.default)(options);
        res.writeHead(200);
        res.end();
      });
    }
  }).listen(httpsPort);

  return {
    sslServer,
    pemCertificate,
    httpsPort
  };
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zZXJ2ZXIuanMiXSwibmFtZXMiOlsicGVtIiwiQiIsInByb21pc2lmeUFsbCIsInJlcXVpcmUiLCJzdGFydFNlcnZlciIsInBvcnQiLCJob3N0IiwiZHJpdmVyIiwiSW9zRHJpdmVyIiwicm91dGVDb25maWd1cmluZ0Z1bmN0aW9uIiwic2VydmVyIiwiaG9zdG5hbWUiLCJsb2ciLCJpbmZvIiwic3RhcnRIdHRwc1NlcnZlciIsInByaXZhdGVLZXkiLCJjcmVhdGVQcml2YXRlS2V5QXN5bmMiLCJrZXlzIiwiY3JlYXRlQ2VydGlmaWNhdGVBc3luYyIsImRheXMiLCJzZWxmU2lnbmVkIiwic2VydmljZUtleSIsImtleSIsInBlbUNlcnRpZmljYXRlIiwiY2VydGlmaWNhdGUiLCJodHRwc1BvcnQiLCJwb3J0ZmluZGVyIiwiZ2V0UG9ydFByb21pc2UiLCJzZXJ2ZXJPcHRzIiwiY2VydCIsInNzbFNlcnZlciIsImh0dHBzIiwiY3JlYXRlU2VydmVyIiwicmVxdWVzdFJlY2VpdmVkIiwicmVxIiwicmVzIiwiZGVidWciLCJtZXRob2QiLCJ1cmwiLCJzZXRIZWFkZXIiLCJ3cml0ZUhlYWQiLCJlbmQiLCJib2R5Iiwib24iLCJvbkRhdGEiLCJkYXRhIiwib25FbmQiLCJodHRwc1VybCIsInBhcnNlIiwidXJpIiwicGF0aG5hbWUiLCJvcHRpb25zIiwibGlzdGVuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQSxNQUFNQSxHQUFHLEdBQUdDLGtCQUFFQyxZQUFGLENBQWVDLE9BQU8sQ0FBQyxLQUFELENBQXRCLENBQVo7O0FBR0EsZUFBZUMsV0FBZixDQUE0QkMsSUFBNUIsRUFBa0NDLElBQWxDLEVBQXdDO0FBQ3RDLE1BQUlDLE1BQU0sR0FBRyxJQUFJQyxpQkFBSixFQUFiO0FBQ0EsTUFBSUMsd0JBQXdCLEdBQUcsZ0RBQVdGLE1BQVgsQ0FBL0I7QUFDQSxNQUFJRyxNQUFNLEdBQUcsTUFBTSw4QkFBVztBQUFDRCxJQUFBQSx3QkFBRDtBQUEyQkosSUFBQUEsSUFBM0I7QUFBaUNNLElBQUFBLFFBQVEsRUFBRUw7QUFBM0MsR0FBWCxDQUFuQjs7QUFDQU0sa0JBQUlDLElBQUosQ0FBVSx3Q0FBdUNQLElBQUssSUFBR0QsSUFBSyxFQUE5RDs7QUFDQSxTQUFPSyxNQUFQO0FBQ0Q7O0FBRUQsZUFBZUksZ0JBQWYsQ0FBaUNULElBQWpDLEVBQXVDQyxJQUF2QyxFQUE2QztBQUUzQyxNQUFJUyxVQUFVLEdBQUcsTUFBTWYsR0FBRyxDQUFDZ0IscUJBQUosRUFBdkI7QUFDQSxNQUFJQyxJQUFJLEdBQUcsTUFBTWpCLEdBQUcsQ0FBQ2tCLHNCQUFKLENBQTJCO0FBQUNDLElBQUFBLElBQUksRUFBRSxDQUFQO0FBQVVDLElBQUFBLFVBQVUsRUFBRSxJQUF0QjtBQUE0QkMsSUFBQUEsVUFBVSxFQUFFTixVQUFVLENBQUNPO0FBQW5ELEdBQTNCLENBQWpCO0FBQ0EsTUFBSUMsY0FBYyxHQUFHTixJQUFJLENBQUNPLFdBQTFCO0FBR0EsTUFBSUMsU0FBUyxHQUFHLE1BQU1DLG9CQUFXQyxjQUFYLEVBQXRCO0FBR0EsUUFBTUMsVUFBVSxHQUFHO0FBQUNOLElBQUFBLEdBQUcsRUFBRUwsSUFBSSxDQUFDSSxVQUFYO0FBQXVCUSxJQUFBQSxJQUFJLEVBQUVOO0FBQTdCLEdBQW5COztBQUNBLE1BQUlPLFNBQVMsR0FBR0MsZUFBTUMsWUFBTixDQUFtQkosVUFBbkIsRUFBK0IsU0FBU0ssZUFBVCxDQUEwQkMsR0FBMUIsRUFBK0JDLEdBQS9CLEVBQW9DO0FBQ2pGdkIsb0JBQUl3QixLQUFKLENBQVcsbUJBQWtCRixHQUFHLENBQUNHLE1BQU8sa0JBQWlCSCxHQUFHLENBQUNJLEdBQUksR0FBakU7O0FBQ0EsUUFBSUosR0FBRyxDQUFDRyxNQUFKLEtBQWUsU0FBbkIsRUFBOEI7QUFDNUJGLE1BQUFBLEdBQUcsQ0FBQ0ksU0FBSixDQUFjLDZCQUFkLEVBQTZDLEdBQTdDO0FBQ0FKLE1BQUFBLEdBQUcsQ0FBQ0ksU0FBSixDQUFjLDhCQUFkLEVBQThDLG9CQUE5QztBQUNBSixNQUFBQSxHQUFHLENBQUNJLFNBQUosQ0FBYyw4QkFBZCxFQUE4QyxjQUE5QztBQUNBSixNQUFBQSxHQUFHLENBQUNLLFNBQUosQ0FBYyxHQUFkO0FBQ0FMLE1BQUFBLEdBQUcsQ0FBQ00sR0FBSjtBQUNELEtBTkQsTUFNTyxJQUFJUCxHQUFHLENBQUNHLE1BQUosS0FBZSxNQUFuQixFQUEyQjtBQUNoQyxVQUFJSyxJQUFJLEdBQUcsRUFBWDtBQUNBUixNQUFBQSxHQUFHLENBQUNTLEVBQUosQ0FBTyxNQUFQLEVBQWUsU0FBU0MsTUFBVCxDQUFpQkMsSUFBakIsRUFBdUI7QUFDcENILFFBQUFBLElBQUksSUFBSUcsSUFBUjtBQUNELE9BRkQ7QUFHQVgsTUFBQUEsR0FBRyxDQUFDUyxFQUFKLENBQU8sS0FBUCxFQUFjLGVBQWVHLEtBQWYsR0FBd0I7QUFDcEMsWUFBSUMsUUFBUSxHQUFHVCxhQUFJVSxLQUFKLENBQVVkLEdBQUcsQ0FBQ0ksR0FBZCxDQUFmOztBQUNBLFlBQUlXLEdBQUcsR0FBSSxVQUFTM0MsSUFBSyxJQUFHRCxJQUFLLEdBQUUwQyxRQUFRLENBQUNHLFFBQVMsRUFBckQ7O0FBQ0F0Qyx3QkFBSXdCLEtBQUosQ0FBVyxZQUFXTSxJQUFLLFNBQVFPLEdBQUksR0FBdkM7O0FBR0EsWUFBSUUsT0FBTyxHQUFHO0FBQ1pkLFVBQUFBLE1BQU0sRUFBRSxNQURJO0FBRVpZLFVBQUFBLEdBRlk7QUFHWlAsVUFBQUE7QUFIWSxTQUFkO0FBS0EsY0FBTSw2QkFBUVMsT0FBUixDQUFOO0FBQ0FoQixRQUFBQSxHQUFHLENBQUNLLFNBQUosQ0FBYyxHQUFkO0FBQ0FMLFFBQUFBLEdBQUcsQ0FBQ00sR0FBSjtBQUNELE9BZEQ7QUFlRDtBQUNGLEdBN0JlLEVBNkJiVyxNQTdCYSxDQTZCTjNCLFNBN0JNLENBQWhCOztBQStCQSxTQUFPO0FBQ0xLLElBQUFBLFNBREs7QUFFTFAsSUFBQUEsY0FGSztBQUdMRSxJQUFBQTtBQUhLLEdBQVA7QUFLRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgc2VydmVyIGFzIGJhc2VTZXJ2ZXIsIHJvdXRlQ29uZmlndXJpbmdGdW5jdGlvbiBhcyBtYWtlUm91dGVyIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcbmltcG9ydCB7IElvc0RyaXZlciB9IGZyb20gJy4vZHJpdmVyJztcbmltcG9ydCBodHRwcyBmcm9tICdodHRwcyc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgcmVxdWVzdCBmcm9tICdyZXF1ZXN0LXByb21pc2UnO1xuaW1wb3J0IHVybCBmcm9tICd1cmwnO1xuaW1wb3J0IHBvcnRmaW5kZXIgZnJvbSAncG9ydGZpbmRlcic7XG5jb25zdCBwZW0gPSBCLnByb21pc2lmeUFsbChyZXF1aXJlKCdwZW0nKSk7XG5cblxuYXN5bmMgZnVuY3Rpb24gc3RhcnRTZXJ2ZXIgKHBvcnQsIGhvc3QpIHtcbiAgbGV0IGRyaXZlciA9IG5ldyBJb3NEcml2ZXIoKTtcbiAgbGV0IHJvdXRlQ29uZmlndXJpbmdGdW5jdGlvbiA9IG1ha2VSb3V0ZXIoZHJpdmVyKTtcbiAgbGV0IHNlcnZlciA9IGF3YWl0IGJhc2VTZXJ2ZXIoe3JvdXRlQ29uZmlndXJpbmdGdW5jdGlvbiwgcG9ydCwgaG9zdG5hbWU6IGhvc3R9KTtcbiAgbG9nLmluZm8oYElvc0RyaXZlciBzZXJ2ZXIgbGlzdGVuaW5nIG9uIGh0dHA6Ly8ke2hvc3R9OiR7cG9ydH1gKTtcbiAgcmV0dXJuIHNlcnZlcjtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc3RhcnRIdHRwc1NlcnZlciAocG9ydCwgaG9zdCkge1xuICAvLyBDcmVhdGUgYSByYW5kb20gcGVtIGNlcnRpZmljYXRlXG4gIGxldCBwcml2YXRlS2V5ID0gYXdhaXQgcGVtLmNyZWF0ZVByaXZhdGVLZXlBc3luYygpO1xuICBsZXQga2V5cyA9IGF3YWl0IHBlbS5jcmVhdGVDZXJ0aWZpY2F0ZUFzeW5jKHtkYXlzOiAxLCBzZWxmU2lnbmVkOiB0cnVlLCBzZXJ2aWNlS2V5OiBwcml2YXRlS2V5LmtleX0pO1xuICBsZXQgcGVtQ2VydGlmaWNhdGUgPSBrZXlzLmNlcnRpZmljYXRlO1xuXG4gIC8vIGZpbmQgYSBwb3J0XG4gIGxldCBodHRwc1BvcnQgPSBhd2FpdCBwb3J0ZmluZGVyLmdldFBvcnRQcm9taXNlKCk7XG5cbiAgLy8gSG9zdCBhbiBTU0wgc2VydmVyIHRoYXQgdXNlcyB0aGF0IGNlcnRpZmljYXRlXG4gIGNvbnN0IHNlcnZlck9wdHMgPSB7a2V5OiBrZXlzLnNlcnZpY2VLZXksIGNlcnQ6IHBlbUNlcnRpZmljYXRlfTtcbiAgbGV0IHNzbFNlcnZlciA9IGh0dHBzLmNyZWF0ZVNlcnZlcihzZXJ2ZXJPcHRzLCBmdW5jdGlvbiByZXF1ZXN0UmVjZWl2ZWQgKHJlcSwgcmVzKSB7XG4gICAgbG9nLmRlYnVnKGBSZWNlaXZlZCBIVFRQUyAnJHtyZXEubWV0aG9kfScgcmVxdWVzdCBmb3IgJyR7cmVxLnVybH0nYCk7XG4gICAgaWYgKHJlcS5tZXRob2QgPT09ICdPUFRJT05TJykge1xuICAgICAgcmVzLnNldEhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJywgJyonKTtcbiAgICAgIHJlcy5zZXRIZWFkZXIoJ0FjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHMnLCAnUE9TVCwgR0VULCBPUFRJT05TJyk7XG4gICAgICByZXMuc2V0SGVhZGVyKCdBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzJywgJ0NvbnRlbnQtVHlwZScpO1xuICAgICAgcmVzLndyaXRlSGVhZCgyMDApO1xuICAgICAgcmVzLmVuZCgpO1xuICAgIH0gZWxzZSBpZiAocmVxLm1ldGhvZCA9PT0gJ1BPU1QnKSB7XG4gICAgICBsZXQgYm9keSA9ICcnO1xuICAgICAgcmVxLm9uKCdkYXRhJywgZnVuY3Rpb24gb25EYXRhIChkYXRhKSB7XG4gICAgICAgIGJvZHkgKz0gZGF0YTtcbiAgICAgIH0pO1xuICAgICAgcmVxLm9uKCdlbmQnLCBhc3luYyBmdW5jdGlvbiBvbkVuZCAoKSB7XG4gICAgICAgIGxldCBodHRwc1VybCA9IHVybC5wYXJzZShyZXEudXJsKTtcbiAgICAgICAgbGV0IHVyaSA9IGBodHRwOi8vJHtob3N0fToke3BvcnR9JHtodHRwc1VybC5wYXRobmFtZX1gO1xuICAgICAgICBsb2cuZGVidWcoYFBhc3NpbmcgJyR7Ym9keX0nIHRvICcke3VyaX0nYCk7XG5cbiAgICAgICAgLy8gbm93IHdlIHNlbmQgdG8gdGhlIHJpZ2h0IHBsYWNlXG4gICAgICAgIGxldCBvcHRpb25zID0ge1xuICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgIHVyaSxcbiAgICAgICAgICBib2R5LFxuICAgICAgICB9O1xuICAgICAgICBhd2FpdCByZXF1ZXN0KG9wdGlvbnMpO1xuICAgICAgICByZXMud3JpdGVIZWFkKDIwMCk7XG4gICAgICAgIHJlcy5lbmQoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSkubGlzdGVuKGh0dHBzUG9ydCk7XG5cbiAgcmV0dXJuIHtcbiAgICBzc2xTZXJ2ZXIsXG4gICAgcGVtQ2VydGlmaWNhdGUsXG4gICAgaHR0cHNQb3J0LFxuICB9O1xufVxuXG5leHBvcnQgeyBzdGFydFNlcnZlciwgc3RhcnRIdHRwc1NlcnZlciB9O1xuIl0sImZpbGUiOiJsaWIvc2VydmVyLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
