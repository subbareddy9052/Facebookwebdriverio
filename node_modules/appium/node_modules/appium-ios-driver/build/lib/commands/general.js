"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _lodash = _interopRequireDefault(require("lodash"));

var _js2xmlparser = _interopRequireDefault(require("js2xmlparser2"));

var _logger = _interopRequireDefault(require("../logger"));

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var utils = _interopRequireWildcard(require("../utils"));

var _nodeSimctl = require("node-simctl");

var _moment = _interopRequireDefault(require("moment"));

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;
const MOMENT_FORMAT_ISO8601 = 'YYYY-MM-DDTHH:mm:ssZ';

commands.active = async function active() {
  if (this.isWebContext()) {
    return await this.executeAtom('active_element', []);
  } else {
    return await this.uiAutoClient.sendCommand('au.getActiveElement()');
  }
};

commands.getDeviceTime = async function getDeviceTime(format = MOMENT_FORMAT_ISO8601) {
  _logger.default.info('Attempting to capture iOS device date and time');

  let cmd;
  let args;
  let inputFormat;

  if (this.isRealDevice()) {
    try {
      cmd = await _appiumSupport.fs.which('idevicedate');
    } catch (err) {
      _logger.default.errorAndThrow('Could not capture device date and time using libimobiledevice idevicedate. ' + 'Libimobiledevice is probably not installed');
    }

    _logger.default.info(`Found idevicedate: '${cmd}'`);

    args = ['-u', this.opts.udid];
    inputFormat = 'ddd MMM DD HH:mm:ss z YYYY';
  } else {
    _logger.default.warn('On simulator. Assuming device time is the same as host time');

    cmd = 'date';
    args = ['+%Y-%m-%dT%H:%M:%S%z'];
    inputFormat = 'YYYY-MM-DDTHH:mm:ssZZ';
  }

  const stdout = (await (0, _teen_process.exec)(cmd, args)).stdout.trim();

  _logger.default.debug(`Got the following output out of '${cmd} ${args.join(' ')}': ${stdout}`);

  const parsedTimestamp = _moment.default.utc(stdout, inputFormat);

  if (!parsedTimestamp.isValid()) {
    _logger.default.warn(`Cannot parse the timestamp '${stdout}' returned by '${cmd}' command. Returning it as is`);

    return stdout;
  }

  return parsedTimestamp.utcOffset(parsedTimestamp._tzm || 0).format(format);
};

commands.hideKeyboard = async function hideKeyboard(strategy, ...possibleKeys) {
  possibleKeys.pop();
  let cmd;

  let key = _lodash.default.find(possibleKeys, k => {
    return k;
  });

  if (key) {
    strategy = strategy || 'pressKey';
    cmd = `au.hideKeyboard('${strategy}', '${key}')`;
  } else {
    strategy = strategy || 'default';
    cmd = `au.hideKeyboard('${strategy}')`;
  }

  await this.uiAutoClient.sendCommand(cmd);
};

commands.getPageSource = async function getPageSource() {
  if (this.isWebContext()) {
    const script = 'return document.documentElement.outerHTML';
    return await this.executeAtom('execute_script', [script, []]);
  } else {
    return await this.getNativePageSource();
  }
};

helpers.getNativePageSource = async function getNativePageSource() {
  let jsonSource = await this.getSourceForElementForXML();

  if (typeof jsonSource === 'string') {
    jsonSource = JSON.parse(jsonSource);
  }

  let xmlSource = (0, _js2xmlparser.default)('AppiumAUT', jsonSource, {
    wrapArray: {
      enabled: false,
      elementName: 'element'
    },
    declaration: {
      include: true
    },
    prettyPrinting: {
      indentString: '    '
    }
  });
  return xmlSource;
};

commands.background = async function background(secs) {
  await this.uiAutoClient.sendCommand(`au.background(${secs})`);
};

commands.lock = async function lock(secs) {
  if (!secs) {
    _logger.default.debug('No seconds parameter. Using 0 seconds');

    secs = 0;
  }

  await this.uiAutoClient.sendCommand(`au.lock(${secs})`);
};

commands.closeApp = async function closeApp() {
  let appName = this.opts.app || this.opts.bundleId;

  try {
    await this.stop();

    _logger.default.info(`Successfully closed the '${appName}' app.`);
  } catch (err) {
    _logger.default.warn(`Something went wrong while closing the '${appName}' app.`);

    throw err;
  }
};

commands.launchApp = async function launchApp() {
  let appName = this.opts.app || this.opts.bundleId;

  try {
    await this.start();

    _logger.default.info(`Successfully launched the '${appName}' app.`);
  } catch (err) {
    _logger.default.warn(`Something went wrong while launching the '${appName}' app.`);

    throw err;
  }
};

commands.removeApp = async function removeApp(bundleId) {
  if (this.isRealDevice()) {
    await this.realDevice.remove(bundleId);
  } else {
    await this.sim.removeApp(bundleId);
  }
};

commands.keys = async function keys(keys) {
  if (this.isWebContext()) {
    let el = await this.active();

    if (_lodash.default.isUndefined(el.ELEMENT)) {
      throw new _appiumBaseDriver.errors.NoSuchElementError();
    }

    await this.setValue(keys, el.ELEMENT);
  } else {
    if (_lodash.default.isArray(keys)) {
      keys = keys.join('');
    }

    if (!_lodash.default.isString(keys)) {
      keys = keys.toString();
    }

    keys = _appiumSupport.util.escapeSpecialChars(keys, "'");
    let command = `au.sendKeysToActiveElement('${keys}')`;
    await this.uiAutoClient.sendCommand(command);
  }
};

commands.setGeoLocation = async function setGeoLocation(location) {
  await this.uiAutoClient.sendCommand(`target.setLocation(${JSON.stringify(location)})`);
};

commands.getWindowSize = async function getWindowSize(windowHandle = 'current') {
  if (windowHandle !== 'current') {
    throw new _appiumBaseDriver.errors.NotYetImplementedError('Currently only getting current window size is supported.');
  }

  if (this.isWebContext()) {
    return await this.executeAtom('get_window_size', []);
  } else {
    return await this.uiAutoClient.sendCommand('au.getWindowSize()');
  }
};

commands.getWindowRect = async function getWindowRect() {
  const {
    width,
    height
  } = await this.getWindowSize();
  return {
    width,
    height,
    x: 0,
    y: 0
  };
};

commands.getStrings = async function getStrings(language, stringFile = null) {
  _logger.default.debug(`Gettings strings for language '${language}' and string file '${stringFile}'`);

  return await utils.parseLocalizableStrings(Object.assign({}, this.opts, {
    language,
    stringFile,
    strictMode: true
  }));
};

commands.setUrl = async function setUrl(url) {
  _logger.default.debug(`Attempting to set url '${url}'`);

  if (!this.isWebContext()) {
    await (0, _nodeSimctl.openUrl)(this.opts.udid || this.sim.udid, url);
    return;
  }

  this.setCurrentUrl(url);
  this.curWebFrames = [];
  await this.remote.navToUrl(url);
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
